{"version":3,"sources":["contexts/expertsContext.jsx","components/Bits/ExpertButton.jsx","components/Bits/LightSwitch.jsx","components/Bits/AuthDrawer.jsx","components/Bits/AuthButton.jsx","components/Bits/ProfileAvatar.jsx","media/logos/USAWalletLogo.svg","components/Pages/TopNavBar.jsx","media/characters/LibertyFox.svg","components/Guides/LibertyFox.js","media/characters/SamEagle.svg","components/Guides/SamEagle.js","media/characters/Benicorn.svg","components/Guides/Benicorn.js","screens/ExpertStage.jsx","screens/BuySell.jsx","hooks/usePositions.jsx","hooks/useTransactions.jsx","components/Blocks/TransactionList.jsx","components/Blocks/TokenTable.jsx","screens/PortfolioPrices.jsx","contexts/actionsContext.jsx","components/Bits/FromSelect.jsx","components/Bits/AmountSelect.jsx","components/Bits/StartSend.jsx","components/Bits/ToAddress.jsx","components/Blocks/SendPanel.jsx","contexts/quoteContext.jsx","components/Bits/ToSelect.jsx","components/Blocks/AddressPanel.js","screens/SendReceive.jsx","components/Bits/RequestQuote.jsx","components/Blocks/SwapPanel.jsx","screens/SwapTrade.jsx","media/Padding/LadyLiberty.jpg","screens/BottomFooter.jsx","components/App.js","components/Support/reportWebVitals.js","index.js"],"names":["ExpertsContext","React","createContext","useExperts","useContext","ExpertsProvider","props","useState","expertsOn","toggleExperts","actionMode","setActionMode","dialog","setDialog","Provider","value","children","ExpertButton","colorMode","useColorMode","label","aria-label","icon","NotAllowed","Chat","boxShadow","mr","mt","variant","onClick","LightSwitch","toggleColorMode","className","Moon","Sun","AuthDrawer","useMoralis","authenticate","isAuthenticating","authError","isAuthenticated","login","setUserData","signup","user","console","groupCollapsed","attributes","username","userName","setUserName","email","setEmail","password","setPassword","groupEnd","spacing","borderWidth","borderRadius","padding","status","message","placeholder","type","onChange","event","currentTarget","emailVerified","undefined","usePost","alert","disabled","isLoading","AuthButton","logout","useDisclosure","isOpen","onOpen","onClose","Unlock","Lock","placement","closeDrawer","ProfileAvatar","TopNavBar","boxSize","name","src","USAWalletEagleLogo","bg","fontSize","bgGradient","bgClip","LibertyFox","poke","height","width","transform","IconBadge","alt","marginBottom","SamEagle","BadgeIcon","Benicorn","ExpertStage","bgColor","borderColor","m","p","margin","text-align","BuySell","ethAddress","useEffect","style","emptyList","usePositions","Moralis","positions","setPositions","totalValue","setTotalValue","setIsLoading","Web3","getAllERC20","then","allPositions","ids","map","token","toLowerCase","coinGeckoList","id","filter","Boolean","join","url","fetch","response","json","data","marketData","forEach","d","symbol","toUpperCase","runningTotal","newList","output","tokenData","image","price","current_price","tokens","balance","decimals","valueString","parseFloat","toPrecision","toFixed","TransactionList","address","chain","Txs","setTxs","Web3API","account","getTransactions","userTrans","log","newTxs","result","Tx","from_address","counterparty","to_address","amount","debug","useTransactions","timestamp","Date","block_timestamp","toLocaleDateString","toLocaleTimeString","hash","TokenTable","allowToggle","position","gap","size","ml","textAlign","pb","PortfolioPrices","align","ActionsContext","useActions","ActionsProvider","fromSymbol","setFromSymbol","fromAddress","setFromAddress","toSymbol","setToSymbol","toAddress","setToAddress","txAmount","setTxAmount","FromSelect","waiting","isRequired","e","selectedIndex","target","options","tokenAddress","AmountSelect","val","maxSpend","setMaxSpend","setDecimals","setValue","find","enable","step","max","min","precision","replace","StartSend","enabled","ToAddress","SendPanel","alignItems","justifyContent","paddingLeft","paddingRight","paddingTop","paddingBottom","visible","QuoteContext","useQuote","QuoteProvider","quoteValid","setQuoteValid","fromToken","setFromToken","fromTokenAmount","setFromTokenAmount","protocols","setProtocols","toToken","setToToken","toTokenAmount","setToTokenAmount","estimatedGas","setEstimatedGas","offeringData","networkId","description","ToSelect","handleChange","a","selectedSymbol","childNodes","selectedRecord","selectedAddress","AddressPanel","copied","setCopied","setData","User","current","text","onCopy","Copy","SendReceive","localMode","setLocalMode","RequestQuote","handlePress","oneInchHead","oneInchQuote","error","SwapPanel","SwapTrade","library","add","fab","faCheckSquare","faCoffee","BottomFooter","ladyLib","scale","color","App","to","leftIcon","View","Repeat","Link","Email","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","appId","serverUrl","document","getElementById"],"mappings":"yrBAEMA,EAAiBC,IAAMC,gBAEhBC,EAAa,kBAAMC,qBAAWJ,IAE9BK,EAAkB,SAACC,GAAW,IAAD,EACLC,oBAAS,GADJ,mBACjCC,EADiC,KACtBC,EADsB,OAEJF,mBAAS,QAFL,mBAEjCG,EAFiC,KAErBC,EAFqB,OAGZJ,mBAC1B,iDAJsC,mBAGjCK,EAHiC,KAGzBC,EAHyB,KAOxC,OACE,cAACb,EAAec,SAAhB,CACEC,MAAO,CACLP,YACAC,gBACAC,aACAC,gBACAC,SACAC,aAPJ,SAUGP,EAAMU,YCpBAC,EAAe,WAAO,IAAD,EACKd,IAA7BK,EADwB,EACxBA,UAAWC,EADa,EACbA,cACXS,EAAcC,cAAdD,UAER,OACE,cAAC,IAAD,CAASE,MAAM,wBAAf,SACE,cAAC,IAAD,CACEC,aAAYb,EAAY,qBAAuB,uBAC/Cc,KAAMd,EAAY,cAACe,EAAA,EAAD,IAAqB,cAACC,EAAA,EAAD,IACvCC,UAAU,UACVC,GAAI,EACJC,IAAK,EACLC,QAAuB,UAAdV,EAAwB,UAAY,QAC7CW,QAAS,kBAAMpB,GAAeD,S,oBCdzBsB,EAAc,WAAO,IAAD,EACQX,cAA/BD,EADuB,EACvBA,UAAWa,EADY,EACZA,gBACnB,OACE,cAAC,IAAD,CAASX,MAAqB,UAAdF,EAAwB,YAAc,aAAtD,SACE,cAAC,IAAD,CACEc,UAAU,oBACVN,GAAI,EACJC,IAAK,EACLN,aAAW,kBACXC,KAAoB,UAAdJ,EAAwB,cAACe,EAAA,EAAD,IAAe,cAACC,EAAA,EAAD,IAC7CT,UAAU,UACVG,QAAuB,UAAdV,EAAwB,UAAY,QAC7CW,QAASE,O,+ECTJI,G,QAAa,SAAC7B,GAAW,IAAD,EAU/B8B,cARFC,EAFiC,EAEjCA,aACAC,EAHiC,EAGjCA,iBACAC,EAJiC,EAIjCA,UACAC,EALiC,EAKjCA,gBACAC,EANiC,EAMjCA,MACAC,EAPiC,EAOjCA,YACAC,EARiC,EAQjCA,OACAC,EATiC,EASjCA,KAGFC,QAAQC,eAAe,cAZY,MAcHvC,mBAC9BqC,EAAOA,EAAKG,WAAWC,SAAW,IAfD,mBAc5BC,EAd4B,KAclBC,EAdkB,OAiBT3C,mBAASqC,EAAOA,EAAKG,WAAWI,MAAQ,IAjB/B,mBAiB5BA,EAjB4B,KAiBrBC,EAjBqB,OAkBH7C,mBAAS,IAlBN,mBAkB5B8C,EAlB4B,KAkBlBC,EAlBkB,KA+EnC,OAFAT,QAAQU,WAGN,eAAC,IAAD,CACEC,QAAS,EACTC,YAAY,MACZC,aAAa,KACbC,QAAQ,OACRhC,GAAG,OACHF,UAAU,UANZ,UAQgB,MAAbc,GACC,eAAC,IAAD,CAAOqB,OAAO,UAAd,UACE,cAAC,IAAD,IACA,cAAC,IAAD,UAAmBrB,EAAUsB,aAGhCrB,GACC,cAAC,IAAD,CAASpB,MAAM,sCAAf,SACE,cAAC,IAAD,CACE0C,YAAY,cACZC,KAAK,OACLnC,QAAQ,SACRb,MAAOkC,EACPe,SAAU,SAACC,GAAD,OAAWf,EAAYe,EAAMC,cAAcnD,QACrDU,UAAU,cAIhB,cAAC,IAAD,CAASL,MAAM,uDAAf,SACE,cAAC,IAAD,CACEY,UAAWQ,EAAkB,iBAAmB,QAChDsB,YAAY,WACZC,KAAK,QACLnC,QAAQ,SACRb,MAAOoC,EACPa,SAAU,SAACC,GAAD,OAAWb,EAASa,EAAMC,cAAcnD,QAClDU,UAAU,cAGbmB,GAAQA,EAAKG,WAAWoB,eACvB,eAAC,IAAD,CAAOP,OAAO,UAAd,UACE,cAAC,IAAD,IADF,2CAKF,cAAC,IAAD,CAASxC,MAAM,oBAAf,SACE,cAAC,IAAD,CACE0C,YAAY,aACZC,KAAK,WACLnC,QAAQ,SACRb,MAAOsC,EACPW,SAAU,SAACC,GAAD,OAAWX,EAAYW,EAAMC,cAAcnD,QACrDU,UAAU,cAIZe,EAkCA,cAAC,IAAD,CAASpB,MAAM,2FAAf,SACE,cAAC,IAAD,CAAQS,QAvIG,WACjBa,EAAY,CACVO,WACAE,QACAE,SAAuB,KAAbA,OAAkBe,EAAYf,EACxCgB,SAAS,KAkIwB5C,UAAU,UAAvC,iCAlCF,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASL,MAAM,0EAAf,SACE,cAAC,IAAD,CAAQS,QAtHC,WACnBc,EAAOM,GAAsBE,EAAOE,EAAUF,EAAO,CAAEkB,SAAS,KAqHvB5C,UAAU,UAAzC,uBAIF,cAAC,IAAD,CAASL,MAAM,qDAAf,SACE,cAAC,IAAD,CAAQS,QAvHA,WAClBY,EAAMU,EAAoB,KAAbE,OAAkBe,EAAYf,EAAU,CACnDgB,SAAS,KAqH6B5C,UAAU,UAAxC,yBAKJ,cAAC,IAAD,CAASL,MAAM,4CAAf,SACE,cAAC,IAAD,CACES,QA3GgB,WAC1BgB,QAAQC,eAAe,uBACT,KAAVK,EACFmB,MAAM,wDAWNA,MAAM,0CAA4CnB,GAQpDN,QAAQU,YAsFE9B,UAAU,UACV8C,SAAS,IAHX,8BAQF,cAAC,IAAD,CAASnD,MAAM,6DAAf,SACE,cAAC,IAAD,CACEoD,UAAWlC,EACXT,QAlIe,WACzBQ,EAAa,CAAEgC,SAAS,KAkId5C,UAAU,UAHZ,oCChJCgD,EAAa,WAAO,IAAD,EACMrC,cAA5BI,EADsB,EACtBA,gBAAiBkC,EADK,EACLA,OADK,EAEMC,cAA5BC,EAFsB,EAEtBA,OAAQC,EAFc,EAEdA,OAAQC,EAFM,EAENA,QAChB5D,EAAcC,cAAdD,UAER,OACE,mCACGsB,EACC,cAAC,IAAD,CAASpB,MAAM,yBAAf,SACE,cAAC,IAAD,CACEC,aAAW,UACXC,KAAM,cAACyD,EAAA,EAAD,IACNtD,UAAU,UACVC,GAAI,EACJC,IAAK,EACLC,QAAuB,UAAdV,EAAwB,UAAY,QAC7CW,QAAS,kBAAM6C,SAInB,qCACE,cAAC,IAAD,CAAStD,MAAM,uBAAf,SACE,cAAC,IAAD,CACEC,aAAW,SACXC,KAAM,cAAC0D,EAAA,EAAD,IACNvD,UAAU,UACVC,GAAI,EACJC,IAAK,EACLC,QAAuB,UAAdV,EAAwB,UAAY,QAC7CW,QAASgD,MAGb,eAAC,IAAD,CACED,OAAQA,EACRK,UAAU,QACVH,QAASA,EACT9C,UAAS,qBACO,UAAdd,EAAwB,UAAY,UALxC,UAQE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,8BAEA,cAAC,IAAD,UACE,cAAC,EAAD,CAAYgE,YAAaJ,MAG3B,cAAC,IAAD,UACE,cAAC,IAAD,CAAS1D,MAAM,0BAAf,SACE,cAAC,IAAD,CAAQQ,QAAQ,UAAUF,GAAI,EAAGG,QAASiD,EAA1C,oC,UCvDLK,EAAgB,WAC3B,IAAM3C,EAAkBJ,cADS,EAEGuC,cAA5BC,EAFyB,EAEzBA,OAAQC,EAFiB,EAEjBA,OAAQC,EAFS,EAETA,QAExB,OACE,qCACE,cAAC,IAAD,CAAS1D,MAAM,2CAAf,SACE,cAAC,IAAD,CAAQK,UAAU,UAAUC,GAAI,EAAGC,IAAK,EAAGE,QAASgD,MAEtD,eAAC,IAAD,CAAQD,OAAQA,EAAQK,UAAU,QAAQH,QAASA,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,UACGtC,EAAkB,uBAAyB,oBAE9C,cAAC,IAAD,UACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAASpB,MAAM,yBAAf,SACE,cAAC,IAAD,CAAQQ,QAAQ,UAAUF,GAAI,EAAGG,QAASiD,EAA1C,kCCrCC,G,QAAA,IAA0B,2CCW5BM,EAAY,SAAC9E,GAAW,IAC3BkC,EAAoBJ,cAApBI,gBACFtB,EAAYC,cAClB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKkE,QAAQ,OAAb,SACE,cAAC,IAAD,CACEC,KAAK,iBACLC,IAAKC,EACLC,GAAkB,UAAdvE,EAAwB,QAAU,WACtCQ,GAAI,EACJC,GAAI,EACJF,UAAU,eAGd,cAAC,IAAD,CACEO,UAAU,YACV0D,SAAS,MACTC,WAAW,mCACXC,OAAO,OACPnE,UAAU,WACVE,GAAI,EANN,wBAUCa,GAAmB,cAAC,EAAD,IAEpB,cAAC,EAAD,IACA,cAAC,EAAD,IACCA,GAAmB,cAAC,EAAD,Q,UCxCX,MAA0B,uCCE5BqD,EAAa,SAACvF,GACzB,OACE,cAAC,IAAD,CACEuB,QAASvB,EAAMwF,KACfC,OAAO,QACPC,MAAM,QACNC,UAAU,sCACVV,IAAKW,EACLC,IAAI,cACJC,aAAa,UCXJ,MAA0B,qCCE5BC,EAAW,SAAC/F,GACvB,OACE,cAAC,IAAD,CACEyF,OAAO,QACPC,MAAM,QACNC,UAAU,wCACVV,IAAKe,EACLH,IAAI,qBCTK,MAA0B,qCCE5BI,EAAW,SAACjG,GACvB,OACE,cAAC,IAAD,CACEuB,QAASvB,EAAMwF,KACfC,OAAO,QACPC,MAAM,QACNC,UAAU,qCACVV,IAAKe,EACLH,IAAI,cCDGK,EAAc,WAAO,IACxBtF,EAAcC,cAAdD,UADuB,EAEWf,IAAlCK,EAFuB,EAEvBA,UAAWE,EAFY,EAEZA,WAAYE,EAFA,EAEAA,OAE/B,OAAkB,IAAdJ,EAEA,eAAC,IAAD,WACE,eAAC,IAAD,CACEiG,QAAQ,QACRC,YAAY,QACZjD,YAAY,IACZhC,UAAU,UACViC,aAAa,OACbiD,EAAE,OACFC,EAAE,OACFZ,MAAM,QACNL,WAA0B,UAAdzE,EAnBF,qDACD,mDASX,UAWE,cAAC,IAAD,CAAW8E,MAAM,QAAQa,OAAQ,EAAGlD,QAAS,EAAGmD,aAAW,SAA3D,SACE,cAAC,IAAD,CAAMA,aAAW,SAAjB,SAA2BlG,MAE7B,eAAC,IAAD,WACkB,KAAfF,GAAqB,cAAC,EAAD,IACN,SAAfA,GAAyB,cAAC,EAAD,IACV,cAAfA,GAA8B,cAAC,EAAD,IACf,UAAfA,GAA0B,cAAC,EAAD,IACX,UAAfA,GAA0B,cAAC,EAAD,IACX,SAAfA,GAAyB,cAAC,EAAD,IACV,QAAfA,GAAwB,cAAC,EAAD,IACT,SAAfA,GAAyB,cAAC,EAAD,IACV,SAAfA,GAAyB,cAAC,EAAD,IACV,YAAfA,GAA4B,cAAC,EAAD,IACb,YAAfA,GAA4B,cAAC,EAAD,UAGjC,0BAIG,MC3CEqG,GAAU,WACC5F,cAAdD,UADoB,IAEpB0B,EAASR,cAATQ,KAFmB,EAGUzC,IAA7BQ,EAHmB,EAGnBA,cAAeE,EAHI,EAGJA,UACP,OAAG+B,QAAH,IAAGA,KAAMG,WAAWiE,WAOpC,OALAC,qBAAU,WACRtG,EAAc,OACdE,EAAU,4CAIV,qBACEqG,MAAO,CACLlB,MAAO,QACPD,OAAQ,QACRtE,UAAW,kCACXiC,aAAc,OACdmD,OAAQ,W,qDCnBVM,GAAY,GAKLC,GAAe,WAAO,IAAD,EACKhF,cAA7BI,EADwB,EACxBA,gBAAiB6E,EADO,EACPA,QADO,EAGE9G,mBAAS4G,IAHX,mBAGzBG,EAHyB,KAGdC,EAHc,OAIIhH,mBAAS,GAJb,mBAIzBiH,EAJyB,KAIbC,EAJa,OAKElH,mBAAS,GALX,mBAKzBiE,EALyB,KAKdkD,EALc,KAqEhC,OA7DAT,qBAAU,WACJzE,EAGF6E,EAAQM,KAAKC,YAAY,CAAEvD,SAAS,IAAQwD,MAAK,SAACC,GAChD,IAAMC,EAAMD,EACTE,KAAI,SAACC,GAAD,YAC0B,UAA7BA,EAAM3C,KAAK4C,cACPC,GAAa,SAAaC,GAD9B,UAEID,GAAcF,EAAM3C,KAAK4C,sBAF7B,aAEI,EAAyCE,MAE9CC,QAAO,SAACD,GAAD,OAAQE,QAAQF,MACvBG,KAAK,KACFC,EAAM,UAxBlB,sEAwBkB,gCAAoCT,GAvBtC,6DAyBVU,MAAMD,GACHX,MAAK,SAACa,GAAD,OAAcA,EAASC,UAC5Bd,MAAK,SAACe,GAEL,IAAMC,EAAa,GAEnB,OADAD,EAAKE,SAAQ,SAACC,GAAD,OAAQF,EAAWE,EAAEC,OAAOC,eAAiBF,KACnDF,KAERhB,MAAK,SAACe,GACL,IAAIM,EAAe,EACbC,EAAUrB,EAAaE,KAAI,SAACC,GAEhC,IAAMmB,EAAM,gBAAQnB,GACdoB,EAAYT,EAAKX,EAAMe,OAAOC,eAiBpC,OAhBAG,EAAOE,MAAP,OAAeD,QAAf,IAAeA,OAAf,EAAeA,EAAWC,MAC1BF,EAAOG,MAAP,OAAeF,QAAf,IAAeA,OAAf,EAAeA,EAAWG,cAC1BJ,EAAOK,OAASxB,EAAMyB,QAClBzB,EAAMyB,QAAN,SAAgB,GAAMzB,EAAM0B,UAC5B,EACJP,EAAOrI,MAAQqI,EAAOG,MAAQH,EAAOK,OAASL,EAAOG,MAAQ,EAC7DL,GAAgBE,EAAOrI,MACvBqI,EAAOQ,YAAc,CACnBC,WAAU,OAACT,QAAD,IAACA,OAAD,EAACA,EAAQK,QAAQK,YAAY,GACrC,OACAD,WAAU,OAACR,QAAD,IAACA,OAAD,EAACA,EAAWG,eAAeO,QAAQ,GAC7C,KAHF,OAIEX,QAJF,IAIEA,OAJF,EAIEA,EAAQJ,OAAOC,eACf,OACAY,WAAU,OAACT,QAAD,IAACA,OAAD,EAACA,EAAQrI,OAAOgJ,QAAQ,IAE/BX,KAGT7B,EAAa4B,GACb1B,EAAcyB,GACdxB,EAAa,UAKnBH,EAAaJ,IACbO,EAAa,MAGd,CAACL,EAAQM,KAAMnF,IAEX,CAAE8E,YAAW9C,YAAWgD,e,sBC3E3BL,GAAY,GCCL6C,GAAkB,SAAC1J,GAAW,IAAD,EDCX,SAACA,GAAW,IAAD,EACG8B,cAAnCI,EADgC,EAChCA,gBAAiB6E,EADe,EACfA,QAEnB4C,EAHkC,EACNrH,KAEbG,WAAWzC,EAAM4J,MAAQ,WAHN,EAIlB3J,mBAAS4G,IAJS,mBAIjCgD,EAJiC,KAI5BC,EAJ4B,OAKN7J,mBAAS,GALH,mBAKjCiE,EALiC,KAKtBkD,EALsB,KAgDxC,OAzCAT,qBAAU,WACJzE,EACF6E,EAAQgD,QAAQC,QACbC,gBAAgB,CAAElG,SAAS,IAC3BwD,MAAK,SAAC2C,GACL3H,QAAQ4H,IAAI,aAAcD,GAC1B,IAAIE,EAASF,EAAUG,OAAO3C,KAAI,SAAC4C,GACjC,IAAMxB,EAAM,gBAAQwB,GACpB,OAAQX,GACN,KAAKW,EAAGC,aACNzB,EAAO0B,aAAeF,EAAGG,WACzB3B,EAAO4B,QAAU,EAAInB,WAAWe,EAAG7J,OACnC,MACF,KAAK6J,EAAGG,WACN3B,EAAO0B,aAAeF,EAAGC,aACzBzB,EAAO4B,OAAS,EAAInB,WAAWe,EAAG7J,OAClC,MACF,UAAKqD,EACHgF,EAAO0B,kBAAe1G,EACtBgF,EAAO4B,YAAS5G,EAChB,MACF,QACEvB,QAAQoI,MAAM,mBAAoBhB,GAClCpH,QAAQoI,MAAM,0BAA2BL,EAAGC,cAC5ChI,QAAQoI,MAAM,wBAAyBL,EAAGG,YAC1C3B,EAAO0B,aAAe,KACtB1B,EAAO4B,OAAS,KAGpB,OAAO5B,KAETgB,EAAOM,GACPhD,EAAa,OAGjB0C,EAAOjD,IACPO,EAAa,MAGd,CAACL,EAAQM,KAAMnF,IAEX,CAAE2H,MAAK3F,aChDa0G,CAAgB,CAAEhB,MAAO,QAA5CC,EADgC,EAChCA,IAAK3F,EAD2B,EAC3BA,UAEb,OAAKA,EAwCS,cAAC,IAAD,uCAvCZ3B,QAAQC,eAAe,mBACvBD,QAAQ4H,IAAIN,GACZtH,QAAQU,WAEN,eAAC,KAAD,CAAO3B,QAAQ,UAAf,UACE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,mBACA,cAAC,KAAD,mBACA,cAAC,KAAD,8BACA,cAAC,KAAD,0BAGJ,cAAC,KAAD,UACG4C,EACC,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,mBACA,cAAC,KAAD,oBACA,cAAC,KAAD,mBACA,cAAC,KAAD,qBAJM,+BAFF,OAUR2F,QAVQ,IAURA,OAVQ,EAURA,EAAKnC,KAAI,SAAC4C,GAER,OADAA,EAAGO,UAAY,IAAIC,KAAKR,EAAGS,iBAEzB,eAAC,KAAD,WACE,cAAC,KAAD,UAAKT,EAAGO,UAAUG,uBAClB,cAAC,KAAD,UAAKV,EAAGO,UAAUI,uBAClB,cAAC,KAAD,UAAKX,EAAGE,eACR,cAAC,KAAD,WAAMF,EAAGI,OAAH,SAAY,GAAM1K,EAAMqJ,WAAUG,YAAY,OAJ7Cc,EAAGY,gBCdfC,GAAa,WAAO,IACvBvK,EAAcC,cAAdD,UADsB,EAEekG,KAArCE,EAFsB,EAEtBA,UAAW9C,EAFW,EAEXA,UAAWgD,EAFA,EAEAA,WAE9B,OACE,eAAC,IAAD,CACE/D,YAAa,EACbC,aAAa,MACbsC,MAAM,OACNrC,QAAS,EACTgC,WAA0B,UAAdzE,EAbE,qDACD,mDAOf,WAOIsD,GACA,eAAC,IAAD,4BAAqBqF,WAAWrC,GAAYuC,QAAQ,MAEtD,cAAC,KAAD,CAAW2B,aAAW,EAAC1F,MAAM,OAA7B,UACIxB,GACA8C,EAAUU,KAAI,SAAC2D,GAAD,OACZ,eAAC,KAAD,CAAmC3F,MAAM,OAAzC,UACE,cAAC,KAAD,UACE,eAAC,KAAD,CAAM4F,IAAK,EAAX,UACE,cAAC,IAAD,CAAK5F,MAAM,OAAX,SACE,cAAC,IAAD,CACEV,KAAMqG,EAAS3C,OACfzD,IAAKoG,EAASrC,MACduC,KAAK,SAGT,cAAC,IAAD,CAAK7F,MAAM,OAAX,SACE,cAAC,IAAD,CAAM8F,GAAI,EAAGC,UAAU,OAAvB,SACGJ,EAASrG,SAGd,cAAC,IAAD,CAAKU,MAAM,OAAX,SACE,cAAC,IAAD,CAAM8F,GAAI,EAAGC,UAAU,OAAvB,SACGJ,EAASlC,OAAOK,YAAY,OAGjC,cAAC,IAAD,CAAK9D,MAAM,QAAX,SACE,eAAC,IAAD,CAAM8F,GAAI,EAAGC,UAAU,OAAvB,gBACMJ,EAASpC,OAASoC,EAASpC,MAAMQ,QAAQ,GAD/C,IAEG4B,EAAS3C,QAAU2C,EAAS3C,OAAOC,mBAGxC,cAAC,IAAD,CAAKjD,MAAM,OAAX,SACE,eAAC,IAAD,CAAM8F,GAAI,EAAGC,UAAU,OAAvB,UACG,IADH,MAEMJ,EAAS5K,MAAMgJ,QAAQ,QAG/B,cAAC,KAAD,SAGJ,cAAC,KAAD,CAAgBiC,GAAI,EAApB,SACqB,UAAlBL,EAASrG,MACR,cAAC,GAAD,CAAiB4E,MAAM,MAAMP,SAAUgC,EAAShC,eArClCgC,EAASrG,eClC5B2G,GAAkB,WAAO,IAAD,EACE9L,IAA7BQ,EAD2B,EAC3BA,cAAeE,EADY,EACZA,UAOvB,OALAoG,qBAAU,WACRtG,EAAc,aACdE,EAAU,uDAIV,eAAC,IAAD,CAAKqL,MAAM,SAAX,UACE,cAAC,KAAD,mCACA,uBACA,cAAC,GAAD,QCfAC,GAAiBlM,IAAMC,gBAEhBkM,GAAa,kBAAMhM,qBAAW+L,KAE9BE,GAAkB,SAAC/L,GAAW,IAAD,EACJC,mBAAS,IADL,mBACjC+L,EADiC,KACrBC,EADqB,OAEFhM,mBAAS,IAFP,mBAEjCiM,EAFiC,KAEpBC,EAFoB,OAGRlM,mBAAS,IAHD,mBAGjCmM,EAHiC,KAGvBC,EAHuB,OAINpM,mBAAS,IAJH,mBAIjCqM,EAJiC,KAItBC,EAJsB,OAKRtM,mBAAS,IALD,mBAKjCuM,EALiC,KAKvBC,EALuB,KAOxC,OACE,cAACZ,GAAerL,SAAhB,CACEC,MAAO,CACLuL,aACAC,gBACAC,cACAC,iBACAC,WACAC,cACAC,YACAC,eACAC,WACAC,eAXJ,SAcGzM,EAAMU,Y,gCCvBAgM,GAAa,WAAO,IAAD,EACC5F,KAAvBE,EADsB,EACtBA,UAAW2F,EADW,EACXA,QADW,EAG5Bb,KADMK,EAFsB,EAEtBA,eAAgBF,EAFM,EAENA,cAAeI,EAFT,EAESA,YAAaI,EAFtB,EAEsBA,YAFtB,EAIO5M,IAA7BU,EAJsB,EAItBA,UAAWF,EAJW,EAIXA,cAwBnB,OACE,cAAC,IAAD,CAAKqF,MAAM,OAAX,SACE,eAAC,KAAD,CAAaoC,GAAG,WAAW3G,UAAU,UAAUyL,YAAU,EAAzD,UACE,cAAC,KAAD,CACE9E,GAAG,YACHtE,YAAY,8BACZrC,UAAU,UACVuC,SA7Ba,SAACmJ,GACpB,IAAIC,EAAgBD,EAAEE,OAAOC,QAAQF,cAAgB,EACrDzM,EAAc,WACVyM,EAAgB,GAClBb,EAAcjF,EAAU8F,GAAepE,QACvCyD,EAAenF,EAAU8F,GAAeG,cACxC1M,EACE,2CACEyG,EAAU8F,GAAepE,OACzB,8BAGJ+D,EAAY,GACZR,EAAc,IACdI,EAAY,IACZ9L,EACE,iFASA,UAMIoM,GACA3F,EAAUU,KAAI,SAAC2D,GACb,OACE,2CACQA,EAASlC,QAAUkC,EAASlC,OAAOK,YAAY,GAAI,IACxD6B,EAASrG,KAFZ,OAGGqG,EAASpC,OAASoC,EAASpC,MAAMQ,QAAQ,GAH5C,IAIG4B,EAAS3C,QAAU2C,EAAS3C,OAAOC,cAJtC,cAKG0C,QALH,IAKGA,OALH,EAKGA,EAAU5K,MAAMgJ,QAAQ,KALd4B,EAAS3C,aAU9B,cAAC,KAAD,qE,WCxCKwE,GAAe,WAAO,IAQjBC,EARgB,EACAlN,mBAAS,GADT,mBACzBmN,EADyB,KACfC,EADe,OAEApN,mBAAS,IAFT,mBAEzBoJ,EAFyB,KAEfiE,EAFe,OAGNrN,mBAAS,GAHH,mBAGzBQ,EAHyB,KAGlB8M,EAHkB,OAIDzG,KAAvBE,EAJwB,EAIxBA,UAAW2F,EAJa,EAIbA,QAJa,EAKIb,KAA5BE,EALwB,EAKxBA,WAAYS,EALY,EAKZA,YALY,EAMK5M,IAA7BQ,EANwB,EAMxBA,cAAeE,EANS,EAMTA,UA8BvB,OApBAoG,qBAAU,WACR,IAAI0E,EAAW,GACVsB,EAYHpK,QAAQ4H,IAAI,qCAXR6B,GACFX,EAAWrE,EAAUwG,MACnB,SAACnC,GAAD,OACEA,EAAS3C,OAAOC,iBAAhB,OAAkCqD,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAYrD,kBAElD0E,EAAYhC,EAAWA,EAASlC,OAAS,GACzCmE,EAAYjC,EAAWA,EAAShC,SAAW,IAE3C9G,QAAQ4H,IAAI,oDAKhB9J,EAAc,aAEb,CAAC2G,EAAWgF,EAAYW,IAGzB,cAAC,IAAD,UACE,eAAC,KAAD,CAAa7E,GAAG,aAAa8E,YAAU,EAAvC,UACE,eAAC,KAAD,CACEa,OAAQzB,EAAa,EAAI,EACzB0B,KAAMN,EAAW,GACjBO,IAAKP,EACLQ,IAAK,EACLC,UAAW,EACX1M,UAAU,UACVuC,SAAU,SAAC4F,GAnCL,IAAC6D,EAoCLI,GApCKJ,EAoCU7D,OAnCRxF,IAAfkI,EACI,GACAmB,EAAIW,QAAQ,YAAM9B,QAAN,IAAMA,OAAN,EAAMA,EAAYrD,eAAe,MAkCzC8D,EAAYnD,EAAW,SAAG,GAAMD,IAE9B9I,EADE+I,EAAc,EAEd,cACI,IAAMA,EAAe8D,GAAU3D,QAAQ,GACzC,aACAuC,EAHF,+GAWA,iDAEEA,EAFF,4EAQNvL,OA9DQ0M,EA8DM1M,OA7DLqD,IAAfkI,EAA2B,GAAKmB,EAAM,KAAN,OAAYnB,QAAZ,IAAYA,OAAZ,EAAYA,EAAYrD,gBA8BpD,UAiCE,cAAC,KAAD,IACA,eAAC,KAAD,WACE,cAAC,KAAD,IACA,cAAC,KAAD,UAGJ,cAAC,KAAD,uDCpFKoF,GAAY,WAAO,IAAD,EAE3BjC,KADME,EADqB,EACrBA,WAAYE,EADS,EACTA,YAAaE,EADJ,EACIA,SAAUE,EADd,EACcA,UAAWE,EADzB,EACyBA,SAGtD,OACE,cAAC,IAAD,UACE,eAAC,KAAD,CAAa1E,GAAG,YAAhB,UACE,cAAC,IAAD,CAAShH,MAAM,8BAAf,SACE,cAAC,IAAD,CACEkN,QAASxB,EAAW,EAAI,OAAS,QACjCrL,UAAU,UACVI,QAAS,WACPgB,QAAQC,eAAe,aACvBD,QAAQoI,MAAM,wBAAyBqB,GACvCzJ,QAAQoI,MAAM,yBAA0BuB,GACxC3J,QAAQoI,MAAM,sBAAuByB,GACrC7J,QAAQoI,MAAM,sBAAuB2B,GACrC/J,QAAQoI,MAAM,sBAAuB6B,GACrCjK,QAAQU,YAVZ,kCAgBF,cAAC,KAAD,gCC9BKgL,GAAY,WAAO,IAAD,EACgCnC,KAArDE,EADqB,EACrBA,WAAYK,EADS,EACTA,YAAaC,EADJ,EACIA,UAAWC,EADf,EACeA,aAC5ChK,QAAQC,eAAe,aACvBD,QAAQU,WAUR,OACE,cAAC,KAAD,CAAMyC,MAAM,OAAZ,SACE,eAAC,KAAD,CAAaoC,GAAG,YAAY8E,YAAU,EAAtC,UACE,cAAC,IAAD,CACEtL,QAAQ,UACRkC,YAAY,0BACZrC,UAAU,UACVuC,SAfa,SAACmJ,GACpBR,EAAYL,GACZO,EAAaM,EAAEE,OAAOtM,OACtB8B,QAAQC,eAAe,aACvBD,QAAQ4H,IAAI,iBAAkBmC,GAC9B/J,QAAQU,cAYJ,cAAC,KAAD,kDCTKiL,GAAY,WAAO,IAAD,EACepC,KAApCU,EADqB,EACrBA,SAAUR,EADW,EACXA,WAAYM,EADD,EACCA,UADD,EAEQzM,IAA7BQ,EAFqB,EAErBA,cAAeE,EAFM,EAENA,UACfK,EAAcC,cAAdD,UAOR,OALA+F,qBAAU,WACRtG,EAAc,QACdE,EAAU,8BAIV,eAAC,IAAD,CACE4N,WAAW,SACXC,eAAe,SACfjL,YAAa,EACbC,aAAa,MACbiL,YAAa,GACbC,aAAc,GACdC,WAAY,EACZC,cAAe,EACftL,QAAS,EACTmC,WAA0B,UAAdzE,EAxBE,qDACD,mDAaf,UAYE,cAAC,GAAD,IACgB,KAAfoL,GACC,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,GAAD,IACCQ,GACC,cAAC,GAAD,CAAWiC,QAAwB,KAAfzC,EAAoB,SAAW,eAGtDM,GAAa,cAAC,GAAD,OAGlB,2B,iDCjDAoC,GAAe/O,IAAMC,gBAEd+O,GAAW,kBAAM7O,qBAAW4O,KAE5BE,GAAgB,SAAC5O,GAAW,IAAD,EACFC,mBAAS,SADP,mBAC/B4O,EAD+B,KACnBC,EADmB,OAEJ7O,mBAAS,IAFL,mBAE/B8O,EAF+B,KAEpBC,EAFoB,OAGQ/O,mBAAS,GAHjB,mBAG/BgP,EAH+B,KAGdC,EAHc,OAIJjP,mBAAS,IAJL,mBAI/BkP,EAJ+B,KAIpBC,EAJoB,OAKRnP,mBAAS,IALD,mBAK/BoP,EAL+B,KAKtBC,EALsB,OAMIrP,mBAAS,GANb,mBAM/BsP,EAN+B,KAMhBC,EANgB,OAOEvP,mBAAS,IAPX,mBAO/BwP,EAP+B,KAOjBC,EAPiB,KAStC,OACE,cAAChB,GAAalO,SAAd,CACEC,MAAO,CACLoO,aACAC,gBACAC,YACAC,eACAC,kBACAC,qBACAC,YACAC,eACAC,UACAC,aACAC,gBACAC,mBACAC,eACAC,mBAfJ,SAkBG1P,EAAMU,YC7BPiP,GAAe,CACnB,CACEC,UAAW,EACX5K,KAAM,YACN0D,OAAQ,MACRiB,QAAS,6CACTkG,YAAa,0CACb7G,MACE,sFAEJ,CACE4G,UAAW,IACX5K,KAAM,YACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,+BACb7G,MACE,yFAEJ,CACE4G,UAAW,IACX5K,KAAM,OACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,6BACb7G,MACE,6EAEJ,CACE4G,UAAW,IACX5K,KAAM,UACN0D,OAAQ,MACRiB,QAAS,6CACTkG,YAAa,yBACb7G,MACE,oFAEJ,CACE4G,UAAW,IACX5K,KAAM,OACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,0BACb7G,MACE,qFAEJ,CACE4G,UAAW,IACX5K,KAAM,SACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,yBACb7G,MACE,gFAEJ,CACE4G,UAAW,IACX5K,KAAM,YACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,0BACb7G,MACE,yGAEJ,CACE4G,UAAW,IACX5K,KAAM,YACN0D,OAAQ,QACRiB,QAAS,6CACTkG,YAAa,0BACb7G,MACE,6FAEJ,CACE4G,UAAW,IACX5K,KAAM,YACN0D,OAAQ,QACRiB,QAAS,6CACTkG,YAAa,yBACb7G,MACE,iGAEJ,CACE4G,UAAW,IACX5K,KAAM,WACN0D,OAAQ,MACRiB,QAAS,6CACTkG,YAAa,yBACb7G,MACE,iFAEJ,CACE4G,UAAW,IACX5K,KAAM,eACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,sBACb7G,MACE,wFAEJ,CACE4G,UAAW,IACX5K,KAAM,YACN0D,OAAQ,QACRiB,QAAS,6CACTkG,YAAa,eACb7G,MACE,gFAEJ,CACE4G,UAAW,IACX5K,KAAM,aACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,mCACb7G,MACE,iFAEJ,CACE4G,UAAW,IACX5K,KAAM,YACN0D,OAAQ,MACRiB,QAAS,6CACTkG,YAAa,gCACb7G,MACE,oFAEJ,CACE4G,UAAW,IACX5K,KAAM,0BACN0D,OAAQ,MACRiB,QAAS,6CACTkG,YAAa,sCACb7G,MACE,2EAEJ,CACE4G,UAAW,IACX5K,KAAM,UACN0D,OAAQ,MACRiB,QAAS,6CACTkG,YAAa,kBACb7G,MACE,sFAEJ,CACE4G,UAAW,IACX5K,KAAM,cACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,mBACb7G,MACE,mFAEJ,CACE4G,UAAW,EACX5K,KAAM,YACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,mBACb7G,MACE,yFAEJ,CACE4G,UAAW,IACX5K,KAAM,SACN0D,OAAQ,KACRiB,QAAS,6CACTkG,YAAa,4BACb7G,MACE,kFAEJ,CACE4G,UAAW,IACX5K,KAAM,YACN0D,OAAQ,KACRiB,QAAS,6CACTkG,YAAa,+BACb7G,MACE,yFAEJ,CACE4G,UAAW,EACX5K,KAAM,YACN0D,OAAQ,QACRiB,QAAS,6CACTkG,YACE,0FACF7G,MACE,gFAEJ,CACE4G,UAAW,EACX5K,KAAM,WACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,yBACb7G,MACE,yFAEJ,CACE4G,UAAW,EACX5K,KAAM,gBACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YAAa,wCACb7G,MACE,wFAEJ,CACE4G,UAAW,EACX5K,KAAM,UACN0D,OAAQ,MACRiB,QAAS,6CACTkG,YACE,2FACF7G,MACE,oFAEJ,CACE4G,UAAW,EACX5K,KAAM,YACN0D,OAAQ,OACRiB,QAAS,6CACTkG,YACE,sEACF7G,MACE,0FAIO8G,GAAW,WAAO,IAAD,EAE1BhE,KADME,EADoB,EACpBA,WAAYE,EADQ,EACRA,YAAaG,EADL,EACKA,YAAaE,EADlB,EACkBA,aAAcC,EADhC,EACgCA,SAEpDjM,EAAcV,IAAdU,UACAuO,EAAkBH,KAAlBG,cAEFiB,EAAY,yCAAG,WAAOlD,GAAP,sBAAAmD,EAAA,sDACnBzN,QAAQC,eAAe,6BACvBD,QAAQ4H,IAAI,SAAU0C,GACtBtK,QAAQ4H,IAAI,gBAAiBwF,IACzB7C,EAAgBD,EAAEE,OAAOC,QAAQF,cACrCvK,QAAQ4H,IAAI,iBAAkB2C,GAC1BA,EAAgB,GACdmD,EACFpD,EAAEE,OAAOmD,WAAWpD,GAAerK,WAAWhC,MAAMA,MACtD8B,QAAQ4H,IAAI,kBAAmB8F,GAC/B5D,EAAY4D,EAAetH,eACvBwH,EAAiBR,GAAanC,MAChC,SAAC7F,GAAD,OAAWA,EAAMe,SAAWuH,KAE9B1N,QAAQ4H,IAAI,kBAAmBgG,GAC3BC,EAAkBD,EAAexG,QACrCpH,QAAQ4H,IAAI,mBAAoBiG,GAChC7D,EAAa6D,GACb7N,QAAQ4H,IAAI,gCACZ5H,QAAQ4H,IAAI,cAAe6B,GAC3BzJ,QAAQ4H,IAAI,uBAAwB+B,GACpC3J,QAAQ4H,IAAI,YAAa8F,GACzB1N,QAAQ4H,IAAI,gBAAiBiG,GAC7B7N,QAAQ4H,IAAI,aAAcqC,GAC1BjK,QAAQU,WACR1C,EACE,qDAEEyL,EACA,OACAiE,EAAetH,cACf,OAGJpG,QAAQ4H,IAAI,wBACZ5H,QAAQU,WACRoJ,EAAY,IACZE,EAAa,IACbhM,EAAU,uDAEZuO,EAAc,SAxCK,2CAAH,sDA2ClB,OACE,cAAC,KAAD,CAAMpJ,MAAM,OAAZ,SACE,eAAC,KAAD,CAAaoC,GAAG,SAAS8E,YAAU,EAAnC,UACE,cAAC,KAAD,CACE9E,GAAG,UACHtE,YAAY,6BACZrC,UAAU,UACVuC,SAAUqM,EAJZ,SAMGJ,GACE5H,QACC,SAACJ,GAAD,OAAWA,EAAMe,OAAOC,gBAAkBqD,EAAWrD,iBAEtDjB,KAAI,SAACC,GACJ,OACE,yBAAyBlH,MAAOkH,EAAMe,OAAtC,kBACQf,EAAM3C,OADD2C,EAAM3C,WAM3B,cAAC,KAAD,uE,qBC7RKqL,GAAe,WAAO,IAAD,EACKvO,cAA7BiF,EADwB,EACxBA,QAAS7E,EADe,EACfA,gBACTtB,EAAcC,cAAdD,UAFwB,EAGKf,IAA7BQ,EAHwB,EAGxBA,cAAeE,EAHS,EAGTA,UAHS,EAIUuL,KAJV,KAIxBM,SAJwB,EAIdE,UAJc,EAIHE,SACDvM,oBAAS,IALL,mBAKzBqQ,EALyB,KAKjBC,EALiB,OAMRtQ,mBAAS,OAND,mBAMzBqI,EANyB,KAMnBkI,EANmB,KAO1BlO,EAAOyE,EAAQ0J,KAAKC,UACpBhK,EAAU,OAAGpE,QAAH,IAAGA,OAAH,EAAGA,EAAMG,WAAWiE,WAqBpC,OAnBAC,qBAAU,WACJ2J,GACFjQ,EAAc,WACdE,EACE,sPAMFgQ,GAAU,IAENrO,GACFsO,EAAQ,oBAAclO,QAAd,IAAcA,OAAd,EAAcA,EAAMG,WAAN,YAAiC,kBAI1D,CAAC6N,EAAQpO,IAGV,eAAC,IAAD,CACEiM,WAAW,SACXC,eAAe,SACfjL,YAAa,EACbC,aAAa,MACbiL,YAAa,GACbC,aAAc,GACdC,WAAY,EACZC,cAAe,EACftL,QAAS,EACTmC,WAA0B,UAAdzE,EA3CE,qDACD,mDAgCf,UAYE,cAAC,KAAD,4BACA,cAAC,KAAD,CAAQH,MAAOiG,IACf,eAAC,IAAD,WACE,cAAC,IAAD,UAAOA,IACP,cAAC,mBAAD,CAAiBiK,KAAMrI,EAAMsI,OAAQ,kBAAML,GAAU,IAArD,SACE,cAAC,IAAD,CACEtM,UAAW/B,EACXZ,QAAQ,UACRP,aAAW,4BACXC,KAAM,cAAC6P,GAAA,EAAD,eCxDLC,GAAc,WAAO,IACxBlQ,EAAcC,cAAdD,UADuB,EAEMf,IAA7BQ,EAFuB,EAEvBA,cAAeE,EAFQ,EAERA,UAFQ,EAGGN,mBAAS,QAHZ,mBAGxB8Q,EAHwB,KAGbC,EAHa,KAK/BrK,qBAAU,WACRtG,EAAc,QACdE,EAAU,wDAkBZ,OACE,eAAC,IAAD,CAAKqL,MAAM,SAAX,UACE,cAAC,KAAD,sCACA,uBACA,cAAC,IAAD,CACEuC,WAAW,SACXC,eAAe,SACfjL,YAAa,EACbC,aAAa,MACbiL,YAAa,GACbC,aAAc,GACdC,WAAY,EACZC,cAAe,EACftL,QAAS,EACTmC,WAA0B,UAAdzE,EA1CA,qDACD,mDA+Bb,SAYE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQW,QAhCO,WACrByP,EAAa,QACb3Q,EAAc,QACdE,EAAU,+BA6B6BY,UAAU,UAA3C,kBAGA,cAAC,IAAD,CAAQI,QA7BU,WACxByP,EAAa,WACb3Q,EAAc,WACdE,EACE,qFAyBwCY,UAAU,UAA9C,0BAKJ,uBACe,SAAd4P,GAAwB,cAAC,GAAD,IACzB,uBACe,YAAdA,GAA2B,cAAC,GAAD,QCvDrBE,GAAe,WAAO,IAAD,EAE9BnF,KADME,EADwB,EACxBA,WAAYE,EADY,EACZA,YAAaE,EADD,EACCA,SAAUE,EADX,EACWA,UAAWE,EADtB,EACsBA,SADtB,EAW5BmC,KAPFG,EAJ8B,EAI9BA,cACAE,EAL8B,EAK9BA,aACAE,EAN8B,EAM9BA,mBACAE,EAP8B,EAO9BA,aACAE,EAR8B,EAQ9BA,WACAE,EAT8B,EAS9BA,iBACAE,EAV8B,EAU9BA,gBAEMnP,EAAcV,IAAdU,UACAK,EAAcC,cAAdD,UAEFsQ,EAAW,yCAAG,uBAAAlB,EAAA,6DAClBzN,QAAQC,eAAe,oBACvBD,QAAQoI,MAAM,wBAAyBqB,GACvCzJ,QAAQoI,MAAM,yBAA0BuB,GACxC3J,QAAQoI,MAAM,sBAAuByB,GACrC7J,QAAQoI,MAAM,sBAAuB2B,GACrC/J,QAAQoI,MAAM,sBAAuB6B,GACrCjK,QAAQU,WAER1C,EACE,4BAA8ByL,EAAa,OAASI,EAAW,SAV/C,UAaZjE,MACJgJ,4DAEEjF,EACA,mBACAI,EACA,WACAE,GAEDjF,MAAK,SAACa,GAAD,OAAcA,EAASC,UAC5Bd,MAAK,SAAC6J,GAWL,GAVA7O,QAAQC,eAAe,2BACvBD,QAAQ4H,IAAI,kBAAmBiH,GAC/BA,EAAarC,WAAaC,EAAaoC,EAAarC,WACpDqC,EAAanC,iBACXC,EAAmBkC,EAAanC,iBAClCmC,EAAajC,WAAaC,EAAagC,EAAajC,UAAU,IAC9DiC,EAAa/B,SAAWC,EAAW8B,EAAa/B,SAChD+B,EAAa7B,eACXC,EAAiB4B,EAAa7B,eAChC6B,EAAa3B,cAAgBC,EAAgB0B,EAAa3B,mBAC3B3L,IAA3BsN,EAAajC,UAaf,OAPA5O,EACE,yBACE6Q,EAAaC,MACb,QACAD,EAAa7N,cAEjBuL,EAAc,SAXdA,EAAc,QACdvO,EACE,qEAYJgC,QAAQU,cAjDM,4CAAH,qDAqDjB,OACE,cAAC,IAAD,UACE,eAAC,KAAD,CAAa6E,GAAG,YAAhB,UACE,cAAC,IAAD,CAAShH,MAAM,8BAAf,SACE,cAAC,IAAD,CACEkN,QAASxB,EAAW,EAAI,OAAS,QACjClL,QAAuB,UAAdV,EAAwB,UAAY,QAC7CO,UAAU,UACVI,QAAS2P,EAJX,8BASF,cAAC,KAAD,gCCjFKI,GAAY,WAAO,IAAD,EACcxF,KAAnCU,EADqB,EACrBA,SAAUR,EADW,EACXA,WAAYI,EADD,EACCA,SACtBxL,EAAcC,cAAdD,UAER,OACE,eAAC,IAAD,CACEuN,WAAW,SACXC,eAAe,SACfjL,YAAa,EACbC,aAAa,MACbiL,YAAa,GACbC,aAAc,GACdC,WAAY,EACZC,cAAe,EACftL,QAAS,EACTmC,WAA0B,UAAdzE,EAlBE,qDACD,mDAOf,UAYE,cAAC,GAAD,IACgB,KAAfoL,GACC,qCACE,eAAC,IAAD,WACE,cAAC,GAAD,IACCQ,GACC,cAAC,GAAD,CAAUiC,QAAwB,KAAfzC,EAAoB,SAAW,eAGrDI,GAAY,cAAC,GAAD,WCnCVmF,GAAY,WAAO,IAAD,EACQ1R,IAA7BQ,EADqB,EACrBA,cAAeE,EADM,EACNA,UAOvB,OALAoG,qBAAU,WACRtG,EAAc,QACdE,EAAU,iCAIV,eAAC,IAAD,CAAKqL,MAAM,SAAX,UACE,cAAC,KAAD,yBACA,uBACA,cAAC,GAAD,Q,mDCjBS,I,QAAA,IAA0B,yCCSzC4F,KAAQC,IAAIC,KAAKC,KAAeC,MAEzB,IAAMC,GAAe,WAC1B,OACE,eAAC,IAAD,CAAQzD,eAAe,SAAvB,UACE,cAAC,IAAD,CACEnJ,IAAK6M,GACLpM,MAAM,QACNtC,aAAa,OACbjC,UAAU,aAEZ,uBACA,uBACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAW4Q,MAAM,SAEnB,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,yCAEF,eAAC,IAAD,WACE,cAAC,KAAD,CACErQ,UAAU,SACVV,KAAM,CAAC,MAAO,WACduK,KAAK,KACLyG,MAAM,cAER,cAAC,KAAD,CACEtQ,UAAU,SACVV,KAAM,CAAC,MAAO,mBACduK,KAAK,KACLyG,MAAM,cAER,cAAC,KAAD,CACEtQ,UAAU,SACVV,KAAM,CAAC,MAAO,kBACduK,KAAK,KACLyG,MAAM,cAER,cAAC,KAAD,CACEtQ,UAAU,SACVV,KAAM,CAAC,MAAO,kBACduK,KAAK,KACLyG,MAAM,iBAGV,cAAC,KAAD,QCgCSC,OArEf,WAAgB,IACNrR,EAAcC,cAAdD,UACAsB,EAAoBJ,cAApBI,gBAEJmM,EAAc,CAAEA,YAAa,QACjC,OACE,eAAC,IAAD,CACE5I,OAAO,QACPJ,WAA0B,UAAdzE,EAXE,qDACD,mDAQf,UAIE,uBACA,cAAC,EAAD,IACA,cAAC,EAAD,IACCsB,EACC,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMgQ,GAAG,mBAAmBxQ,UAAU,SAAtC,SACE,cAAC,IAAD,CACEyQ,SAAU,cAACC,EAAA,EAAD,IACVjR,UAAU,UACVG,QAAuB,UAAdV,EAAwB,UAAY,QAH/C,yBAQF,cAAC,IAAD,CAAMsR,GAAG,aAAaxQ,UAAU,SAASkF,MAAOyH,EAAhD,SACE,cAAC,IAAD,CACE8D,SAAU,cAACE,EAAA,EAAD,IACVlR,UAAU,UACVG,QAAuB,UAAdV,EAAwB,UAAY,QAH/C,qBAQF,cAAC,IAAD,CAAMsR,GAAG,WAAWxQ,UAAU,SAASkF,MAAOyH,EAA9C,SACE,cAAC,IAAD,CACE8D,SAAU,cAACG,EAAA,EAAD,IACVnR,UAAU,UACVG,QAAuB,UAAdV,EAAwB,UAAY,QAH/C,0BAQF,cAAC,IAAD,CAAMsR,GAAG,eAAexQ,UAAU,SAASkF,MAAOyH,EAAlD,SACE,cAAC,IAAD,CACE8D,SAAU,cAACI,EAAA,EAAD,IACVpR,UAAU,UACVG,QAAuB,UAAdV,EAAwB,UAAY,QAH/C,+BASJ,uBACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4R,OAAK,EAACC,KAAK,IAAIC,UAAW/G,KACjC,cAAC,IAAD,CAAO8G,KAAK,mBAAmBC,UAAW/G,KAC1C,cAAC,IAAD,CAAO8G,KAAK,aAAaC,UAAWnB,KACpC,cAAC,IAAD,CAAOkB,KAAK,WAAWC,UAAWjM,KAClC,cAAC,IAAD,CAAOgM,KAAK,eAAeC,UAAW5B,WAI1C,cAAC,GAAD,QCrEO6B,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBtL,MAAK,YAAkD,IAA/CuL,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,sBCGRO,GAAQC,aAAY,CACxBC,OAAQ,CACNC,iBAAkB,OAClBC,oBAAoB,KAOxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,KAAD,CAAgBP,MAAOA,GAAvB,SACE,cAAC,IAAD,CAAiBQ,MANT,2CAMuBC,UALnB,kDAKZ,SACE,cAAC,EAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,gBAOZC,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.216b4b73.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\n\nconst ExpertsContext = React.createContext();\n\nexport const useExperts = () => useContext(ExpertsContext);\n\nexport const ExpertsProvider = (props) => {\n  const [expertsOn, toggleExperts] = useState(true);\n  const [actionMode, setActionMode] = useState(\"idle\");\n  const [dialog, setDialog] = useState(\n    \"Welcome to USA Wallet.  Simple, Safe, Secure.\"\n  );\n\n  return (\n    <ExpertsContext.Provider\n      value={{\n        expertsOn,\n        toggleExperts,\n        actionMode,\n        setActionMode,\n        dialog,\n        setDialog,\n      }}\n    >\n      {props.children}\n    </ExpertsContext.Provider>\n  );\n};\n\nexport default ExpertsContext;\n","import { IconButton, Tooltip, useColorMode } from \"@chakra-ui/react\";\nimport { NotAllowedIcon, ChatIcon } from \"@chakra-ui/icons\";\nimport { useExperts } from \"../../contexts/expertsContext\";\n\nexport const ExpertButton = () => {\n  const { expertsOn, toggleExperts } = useExperts();\n  const { colorMode } = useColorMode();\n\n  return (\n    <Tooltip label=\"Toggle expert advice.\">\n      <IconButton\n        aria-label={expertsOn ? \"Mute Expert Advice\" : \"Enable Expert Advice\"}\n        icon={expertsOn ? <NotAllowedIcon /> : <ChatIcon />}\n        boxShadow=\"dark-lg\"\n        mr={2}\n        mt={-2}\n        variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n        onClick={() => toggleExperts(!expertsOn)}\n      />\n    </Tooltip>\n  );\n};\n","import { IconButton, useColorMode, Tooltip } from \"@chakra-ui/react\";\nimport { SunIcon, MoonIcon } from \"@chakra-ui/icons\";\n\nexport const LightSwitch = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <Tooltip label={colorMode === \"light\" ? \"Dark Mode\" : \"Light Mode\"}>\n      <IconButton\n        className=\"LightSwitchButton\"\n        mr={2}\n        mt={-2}\n        aria-label=\"Toggle Darkmode\"\n        icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n        boxShadow=\"dark-lg\"\n        variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n        onClick={toggleColorMode}\n      />\n    </Tooltip>\n  );\n};\n","import { Button, Input, HStack, Tooltip, VStack } from \"@chakra-ui/react\";\nimport { Alert, AlertIcon, AlertDescription } from \"@chakra-ui/react\";\nimport { useMoralis } from \"react-moralis\";\nimport { useState } from \"react\";\nimport \"../AuthDrawer.css\";\n\nexport const AuthDrawer = (props) => {\n  const {\n    authenticate,\n    isAuthenticating,\n    authError,\n    isAuthenticated,\n    login,\n    setUserData,\n    signup,\n    user,\n  } = useMoralis();\n\n  console.groupCollapsed(\"AuthDrawer\");\n\n  const [userName, setUserName] = useState(\n    user ? user.attributes.username : \"\"\n  );\n  const [email, setEmail] = useState(user ? user.attributes.email : \"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSignUp = () => {\n    signup(userName ? userName : email, password, email, { usePost: true });\n  };\n\n  const handleLogIn = () => {\n    login(email, password === \"\" ? undefined : password, {\n      usePost: true,\n    });\n  };\n\n  const handleAuthenticate = () => {\n    authenticate({ usePost: true });\n  };\n\n  const handleSave = () => {\n    setUserData({\n      userName,\n      email,\n      password: password === \"\" ? undefined : password,\n      usePost: true,\n    });\n  };\n\n  const handlePasswordReset = () => {\n    console.groupCollapsed(\"handlePasswordReset\");\n    if (email === \"\") {\n      alert(\"Please enter an e-mail, then retry 'Password reset'.\");\n    } else {\n      // const appId = \"CkGKKjw1WWWWNAo2GRMO1yPyjTrRx8YAIX4E8Q8q\";\n      // const serverUrl = \"https://jlodflimpqon.moralis.io:2053/server\";\n      // Moralis.initialize(appId); // Application id from moralis.io\n      // Moralis.serverURL = serverUrl; //Server url from moralis.io\n\n      // Moralis.User\n      //   .requestPasswordReset(email)\n      //   .then(() => {\n      //     // Password reset request was sent successfully\n      alert(\"Password reset e-mail has been sent to \" + email);\n      //     })\n      //     .catch((error) => {\n      //       // Show the error message somewhere\n      //       alert(\"Error: \" + error.code + \" \" + error.message);\n      //     });\n      // }\n    }\n    console.groupEnd();\n  };\n\n  // const emailClassName = () => {\n  //   if (isAuthenticated && !isAuthenticating) {\n  //     if (user && user.attributes.emailVerified) {\n  //       return \"email verified\";\n  //     }\n  //   }\n  //   return \"email unverified\";\n  // };\n\n  console.groupEnd();\n\n  return (\n    <VStack\n      spacing={6}\n      borderWidth=\"5px\"\n      borderRadius=\"md\"\n      padding=\"30px\"\n      mt=\"10px\"\n      boxShadow=\"dark-lg\"\n    >\n      {authError != null && (\n        <Alert status=\"warning\">\n          <AlertIcon />\n          <AlertDescription>{authError.message}</AlertDescription>\n        </Alert>\n      )}\n      {isAuthenticated && (\n        <Tooltip label=\"Enter desired USA Wallet user name.\">\n          <Input\n            placeholder=\"User Name *\"\n            type=\"text\"\n            variant=\"filled\"\n            value={userName}\n            onChange={(event) => setUserName(event.currentTarget.value)}\n            boxShadow=\"dark-lg\"\n          />\n        </Tooltip>\n      )}\n      <Tooltip label=\"Enter email where you wish to recieve notifications.\">\n        <Input\n          className={isAuthenticated ? \"email verified\" : \"email\"}\n          placeholder=\"E-mail *\"\n          type=\"email\"\n          variant=\"filled\"\n          value={email}\n          onChange={(event) => setEmail(event.currentTarget.value)}\n          boxShadow=\"dark-lg\"\n        />\n      </Tooltip>\n      {user && user.attributes.emailVerified && (\n        <Alert status=\"warning\">\n          <AlertIcon />\n          Check your email for validation link.\n        </Alert>\n      )}\n      <Tooltip label=\"Enter a password.\">\n        <Input\n          placeholder=\"Password *\"\n          type=\"password\"\n          variant=\"filled\"\n          value={password}\n          onChange={(event) => setPassword(event.currentTarget.value)}\n          boxShadow=\"dark-lg\"\n        />\n      </Tooltip>\n\n      {!isAuthenticated ? (\n        <>\n          <HStack>\n            <Tooltip label=\"Use the entered e-mail and password to create a new USA Wallet account.\">\n              <Button onClick={handleSignUp} boxShadow=\"dark-lg\">\n                Sign up\n              </Button>\n            </Tooltip>\n            <Tooltip label=\"Log into USA Wallet with your e-mail and password.\">\n              <Button onClick={handleLogIn} boxShadow=\"dark-lg\">\n                Log in\n              </Button>\n            </Tooltip>\n          </HStack>\n          <Tooltip label=\"Send password reset e-mail (coming soon).\">\n            <Button\n              onClick={handlePasswordReset}\n              boxShadow=\"dark-lg\"\n              disabled=\"1\"\n            >\n              Password Reset\n            </Button>\n          </Tooltip>\n          <Tooltip label=\"Use Metamask to authenticate into your USA Wallet account.\">\n            <Button\n              isLoading={isAuthenticating}\n              onClick={handleAuthenticate}\n              boxShadow=\"dark-lg\"\n            >\n              Use MetaMask\n            </Button>\n          </Tooltip>\n        </>\n      ) : (\n        <Tooltip label=\"Update your USA Wallet account to the currently entered user name, e-mail, and password.\">\n          <Button onClick={handleSave} boxShadow=\"dark-lg\">\n            Update signature.\n          </Button>\n        </Tooltip>\n      )}\n    </VStack>\n  );\n};\n","import React from \"react\";\nimport \"./AuthButton.css\";\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  IconButton,\n  useColorMode,\n  useDisclosure,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport { LockIcon, UnlockIcon } from \"@chakra-ui/icons\";\nimport { useMoralis } from \"react-moralis\";\nimport { AuthDrawer } from \"./AuthDrawer\";\n\nexport const AuthButton = () => {\n  const { isAuthenticated, logout } = useMoralis();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const { colorMode } = useColorMode();\n\n  return (\n    <>\n      {isAuthenticated ? (\n        <Tooltip label=\"Log out of USA Wallet.\">\n          <IconButton\n            aria-label=\"Log Out\"\n            icon={<UnlockIcon />}\n            boxShadow=\"dark-lg\"\n            mr={2}\n            mt={-2}\n            variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n            onClick={() => logout()}\n          />\n        </Tooltip>\n      ) : (\n        <>\n          <Tooltip label=\"Log into USA Wallet.\">\n            <IconButton\n              aria-label=\"Log In\"\n              icon={<LockIcon />}\n              boxShadow=\"dark-lg\"\n              mr={2}\n              mt={-2}\n              variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n              onClick={onOpen}\n            />\n          </Tooltip>\n          <Drawer\n            isOpen={isOpen}\n            placement=\"right\"\n            onClose={onClose}\n            className={`AuthDrawer ${\n              colorMode === \"light\" ? \"lightBG\" : \"darkBG\"\n            }`}\n          >\n            <DrawerOverlay />\n            <DrawerContent>\n              <DrawerCloseButton />\n              <DrawerHeader>Please sign in.</DrawerHeader>\n\n              <DrawerBody>\n                <AuthDrawer closeDrawer={onClose} />\n              </DrawerBody>\n\n              <DrawerFooter>\n                <Tooltip label=\"Cancel identity action.\">\n                  <Button variant=\"outline\" mr={3} onClick={onClose}>\n                    Cancel\n                  </Button>\n                </Tooltip>\n              </DrawerFooter>\n            </DrawerContent>\n          </Drawer>\n        </>\n      )}\n    </>\n  );\n};\n","import {\n  Avatar,\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Tooltip,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { useMoralis } from \"react-moralis\";\nimport { AuthDrawer } from \"./AuthDrawer\";\n\nexport const ProfileAvatar = () => {\n  const isAuthenticated = useMoralis();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Tooltip label=\"Click to update your USA Wallet profile.\">\n        <Avatar boxShadow=\"dark-lg\" mr={2} mt={-2} onClick={onOpen} />\n      </Tooltip>\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>\n            {isAuthenticated ? \"Update user profile.\" : \"Please sign in.\"}\n          </DrawerHeader>\n          <DrawerBody>\n            <AuthDrawer />\n          </DrawerBody>\n          <DrawerFooter>\n            <Tooltip label=\"Cancel profile update.\">\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\n                Cancel\n              </Button>\n            </Tooltip>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/USAWalletLogo.bc06da71.svg\";","import { Box, Image, HStack, Text, useColorMode } from \"@chakra-ui/react\";\n\nimport { ExpertButton } from \"../Bits/ExpertButton\";\nimport { LightSwitch } from \"../Bits/LightSwitch\";\nimport { AuthButton } from \"../Bits/AuthButton\";\nimport { ProfileAvatar } from \"../Bits/ProfileAvatar\";\nimport { useMoralis } from \"react-moralis\";\nimport \"./TopNavBar.css\";\n\nimport USAWalletEagleLogo from \"../../media/logos/USAWalletLogo.svg\";\n\nexport const TopNavBar = (props) => {\n  const { isAuthenticated } = useMoralis();\n  const colorMode = useColorMode();\n  return (\n    <HStack>\n      <Box boxSize=\"70px\">\n        <Image\n          name=\"USAWalletEagle\"\n          src={USAWalletEagleLogo}\n          bg={colorMode === \"light\" ? \"white\" : \"grey.900\"}\n          mr={1}\n          mt={2}\n          boxShadow=\"light-lg\"\n        />\n      </Box>\n      <Text\n        className=\"BrandName\"\n        fontSize=\"5xl\"\n        bgGradient=\"linear(to-b,white,#0000FF,black)\"\n        bgClip=\"text\"\n        boxShadow=\"light-lg\"\n        mt={1}\n      >\n        USA Wallet\n      </Text>\n      {isAuthenticated && <ExpertButton />}\n      {/* <NetworkSelect /> */}\n      <LightSwitch />\n      <AuthButton />\n      {isAuthenticated && <ProfileAvatar />}\n    </HStack>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/LibertyFox.17268b03.svg\";","import { Image } from \"@chakra-ui/react\";\nimport IconBadge from \"../../media/characters/LibertyFox.svg\";\nexport const LibertyFox = (props) => {\n  return (\n    <Image\n      onClick={props.poke}\n      height=\"200px\"\n      width=\"200px\"\n      transform=\"scale(1.78,1.78) translate(5px,9px)\"\n      src={IconBadge}\n      alt=\"Liberty Fox\"\n      marginBottom=\"-2vh\"\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/SamEagle.c625891f.svg\";","import { Image } from \"@chakra-ui/react\";\nimport BadgeIcon from \"../../media/characters/SamEagle.svg\";\nexport const SamEagle = (props) => {\n  return (\n    <Image\n      height=\"200px\"\n      width=\"200px\"\n      transform=\"scale(1.75,1.75) translate(32px,35px)\"\n      src={BadgeIcon}\n      alt=\"Uncle Sam Eagle\"\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/Benicorn.d83d564e.svg\";","import { Image } from \"@chakra-ui/react\";\nimport BadgeIcon from \"../../media/characters/Benicorn.svg\";\nexport const Benicorn = (props) => {\n  return (\n    <Image\n      onClick={props.poke}\n      height=\"200px\"\n      width=\"200px\"\n      transform=\"scale(1.5,1.5) translate(0px,22px)\"\n      src={BadgeIcon}\n      alt=\"Benicorn\"\n    />\n  );\n};\n","import { Container, HStack, Text, useColorMode } from \"@chakra-ui/react\";\nimport { LibertyFox } from \"../components/Guides/LibertyFox\";\nimport { SamEagle } from \"../components/Guides/SamEagle\";\nimport { Benicorn } from \"../components/Guides/Benicorn\";\nimport { useExperts } from \"../contexts/expertsContext\";\n\nconst lightModeBG = \"linear(to-br,blue.400,red.300,white,red.300,white)\";\nconst darkModeBG = \"linear(to-br,blue.900,grey,red.900,grey,red.900)\";\n\nexport const ExpertStage = () => {\n  const { colorMode } = useColorMode();\n  const { expertsOn, actionMode, dialog } = useExperts();\n\n  if (expertsOn === true) {\n    return (\n      <Container>\n        <HStack\n          bgColor=\"black\"\n          borderColor=\"white\"\n          borderWidth=\"2\"\n          boxShadow=\"dark-lg\"\n          borderRadius=\"20px\"\n          m=\"20px\"\n          p=\"20px\"\n          width=\"400px\"\n          bgGradient={colorMode === \"light\" ? lightModeBG : darkModeBG}\n        >\n          <Container width=\"200px\" margin={7} padding={3} text-align=\"center\">\n            <Text text-align=\"center\">{dialog}</Text>\n          </Container>\n          <Container>\n            {actionMode === \"\" && <Benicorn />}\n            {actionMode === \"idle\" && <Benicorn />}\n            {actionMode === \"portfolio\" && <SamEagle />}\n            {actionMode === \"chart\" && <SamEagle />}\n            {actionMode === \"trade\" && <Benicorn />}\n            {actionMode === \"swap\" && <Benicorn />}\n            {actionMode === \"buy\" && <LibertyFox />}\n            {actionMode === \"sell\" && <LibertyFox />}\n            {actionMode === \"send\" && <LibertyFox />}\n            {actionMode === \"receive\" && <LibertyFox />}\n            {actionMode === \"gallery\" && <LibertyFox />}\n          </Container>\n        </HStack>\n        <br />\n      </Container>\n    );\n  } else {\n    return null;\n  }\n};\n","import { useEffect } from \"react\";\nimport { useColorMode } from \"@chakra-ui/react\";\nimport { useMoralis } from \"react-moralis\";\nimport { useExperts } from \"../contexts/expertsContext\";\n\nexport const BuySell = () => {\n  const { colorMode } = useColorMode();\n  const { user } = useMoralis();\n  const { setActionMode, setDialog } = useExperts();\n  const ethAddress = user?.attributes.ethAddress;\n\n  useEffect(() => {\n    setActionMode(\"buy\");\n    setDialog(\"Place an order to buy cryptocurrency.\");\n  });\n\n  return (\n    <div\n      style={{\n        width: \"440px\",\n        height: \"595px\",\n        boxShadow: \"0 2px 10px 0 rgba(0, 0, 0, 0.1)\",\n        borderRadius: \"10px\",\n        margin: \"auto\",\n      }}\n    ></div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\n// import { useNetwork } from \"../contexts/networkContext\";\nimport coinGeckoList from \"../data/coinGeckoTokenList.json\";\nconst emptyList = [];\nconst geckoHead =\n  \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=\";\nconst geckoTail = \"&order=market_cap_desc&per_page=100&page=1&sparkline=false\";\n\nexport const usePositions = () => {\n  const { isAuthenticated, Moralis } = useMoralis();\n  // const { networkName } = useNetwork();\n  const [positions, setPositions] = useState(emptyList);\n  const [totalValue, setTotalValue] = useState(0);\n  const [isLoading, setIsLoading] = useState(1);\n  // const [allPositions, setAllPositions] = useState(emptyList);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // Bring back a list of all tokens the user has\n      //Moralis.Web3.getAllERC20({ usePost: true, chain: networkName }).then(\n      Moralis.Web3.getAllERC20({ usePost: true }).then((allPositions) => {\n        const ids = allPositions\n          .map((token) =>\n            token.name.toLowerCase() === \"ether\"\n              ? coinGeckoList[\"ethereum\"].id\n              : coinGeckoList[token.name.toLowerCase()]?.id\n          )\n          .filter((id) => Boolean(id))\n          .join(\",\");\n        const url = `${geckoHead}?vs_currency=usd&ids=${ids}` + geckoTail;\n        // Call CoinGecko API:\n        fetch(url)\n          .then((response) => response.json())\n          .then((data) => {\n            // Convert to a 'dictionary' array of objects.\n            const marketData = {};\n            data.forEach((d) => (marketData[d.symbol.toUpperCase()] = d));\n            return marketData;\n          })\n          .then((data) => {\n            let runningTotal = 0;\n            const newList = allPositions.map((token) => {\n              // Merge position data with market data and augment.\n              const output = { ...token };\n              const tokenData = data[token.symbol.toUpperCase()];\n              output.image = tokenData?.image;\n              output.price = tokenData?.current_price;\n              output.tokens = token.balance\n                ? token.balance / 10 ** token.decimals\n                : 0;\n              output.value = output.price ? output.tokens * output.price : 0;\n              runningTotal += output.value;\n              output.valueString = [\n                parseFloat(output?.tokens).toPrecision(3) +\n                  \" @ $\" +\n                  parseFloat(tokenData?.current_price).toFixed(2) +\n                  \"/\" +\n                  output?.symbol.toUpperCase() +\n                  \" = $\" +\n                  parseFloat(output?.value).toFixed(2),\n              ];\n              return output;\n            });\n            // Done.  Report back to states.\n            setPositions(newList);\n            setTotalValue(runningTotal);\n            setIsLoading(0);\n          });\n      });\n    } else {\n      // No authentication.  Report blanks.\n      setPositions(emptyList);\n      setIsLoading(1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Moralis.Web3, isAuthenticated]);\n\n  return { positions, isLoading, totalValue };\n};\n","import { useEffect, useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\n\nconst emptyList = [];\n\nexport const useTransactions = (props) => {\n  const { isAuthenticated, Moralis, user } = useMoralis();\n  // const { networkName } = useNetwork();\n  const address = user.attributes[props.chain + \"Address\"];\n  const [Txs, setTxs] = useState(emptyList);\n  const [isLoading, setIsLoading] = useState(1);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      Moralis.Web3API.account\n        .getTransactions({ usePost: true })\n        .then((userTrans) => {\n          console.log(\"userTrans:\", userTrans);\n          let newTxs = userTrans.result.map((Tx) => {\n            const output = { ...Tx };\n            switch (address) {\n              case Tx.from_address:\n                output.counterparty = Tx.to_address;\n                output.amount = -1 * parseFloat(Tx.value);\n                break;\n              case Tx.to_address:\n                output.counterparty = Tx.from_address;\n                output.amount = 1 * parseFloat(Tx.value);\n                break;\n              case undefined:\n                output.counterparty = undefined;\n                output.amount = undefined;\n                break;\n              default:\n                console.debug(\"Failed address: \", address);\n                console.debug(\"Failed Tx.from_address:\", Tx.from_address);\n                console.debug(\"Failed Tx.to_address:\", Tx.to_address);\n                output.counterparty = null;\n                output.amount = null;\n                break;\n            }\n            return output;\n          });\n          setTxs(newTxs);\n          setIsLoading(0);\n        });\n    } else {\n      setTxs(emptyList);\n      setIsLoading(1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Moralis.Web3, isAuthenticated]);\n\n  return { Txs, isLoading };\n};\n","import { Table, Thead, Tbody, Tr, Th, Td, Text } from \"@chakra-ui/react\";\nimport { Skeleton } from \"@chakra-ui/react\";\nimport { useTransactions } from \"../../hooks/useTransactions\";\n\nexport const TransactionList = (props) => {\n  const { Txs, isLoading } = useTransactions({ chain: \"eth\" });\n\n  if (!isLoading) {\n    console.groupCollapsed(\"TransactionList\");\n    console.log(Txs);\n    console.groupEnd();\n    return (\n      <Table variant=\"striped\">\n        <Thead>\n          <Tr>\n            <Th>Date</Th>\n            <Th>Time</Th>\n            <Th>Transacted With</Th>\n            <Th>Amount</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {isLoading ? (\n            <Skeleton>\n              <Tr key=\"loadingTransactionHistory\">\n                <Td>Blah</Td>\n                <Td>Bitty</Td>\n                <Td>Blah</Td>\n                <Td>Blah</Td>\n              </Tr>\n            </Skeleton>\n          ) : (\n            Txs?.map((Tx) => {\n              Tx.timestamp = new Date(Tx.block_timestamp);\n              return (\n                <Tr key={Tx.hash}>\n                  <Td>{Tx.timestamp.toLocaleDateString()}</Td>\n                  <Td>{Tx.timestamp.toLocaleTimeString()}</Td>\n                  <Td>{Tx.counterparty}</Td>\n                  <Td>{(Tx.amount / 10 ** props.decimals).toPrecision(3)}</Td>\n                </Tr>\n              );\n            })\n          )}\n        </Tbody>\n      </Table>\n    );\n  } else return <Text>Transactions Loading...</Text>;\n};\n","import {\n  Avatar,\n  Box,\n  Flex,\n  Text,\n  useColorMode,\n  VStack,\n} from \"@chakra-ui/react\";\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n} from \"@chakra-ui/react\";\nimport { usePositions } from \"../../hooks/usePositions\";\nimport { TransactionList } from \"./TransactionList\";\n\nconst lightModeBG = \"linear(to-br,blue.400,red.300,white,red.300,white)\";\nconst darkModeBG = \"linear(to-br,blue.900,grey,red.900,grey,red.900)\";\n\nexport const TokenTable = () => {\n  const { colorMode } = useColorMode();\n  const { positions, isLoading, totalValue } = usePositions();\n\n  return (\n    <VStack\n      borderWidth={4}\n      borderRadius=\"3xl\"\n      width=\"100%\"\n      padding={5}\n      bgGradient={colorMode === \"light\" ? lightModeBG : darkModeBG}\n    >\n      {!isLoading && (\n        <Text>Total Value: ${parseFloat(totalValue).toFixed(2)}</Text>\n      )}\n      <Accordion allowToggle width=\"100%\">\n        {!isLoading &&\n          positions.map((position) => (\n            <AccordionItem key={position.name} width=\"100%\">\n              <AccordionButton>\n                <Flex gap={6}>\n                  <Box width=\"50px\">\n                    <Avatar\n                      name={position.symbol}\n                      src={position.image}\n                      size=\"sm\"\n                    />\n                  </Box>\n                  <Box width=\"80px\">\n                    <Text ml={2} textAlign=\"left\">\n                      {position.name}\n                    </Text>\n                  </Box>\n                  <Box width=\"70px\">\n                    <Text ml={2} textAlign=\"left\">\n                      {position.tokens.toPrecision(3)}\n                    </Text>\n                  </Box>\n                  <Box width=\"170px\">\n                    <Text ml={2} textAlign=\"left\">\n                      @ ${position.price && position.price.toFixed(2)}/\n                      {position.symbol && position.symbol.toUpperCase()}\n                    </Text>\n                  </Box>\n                  <Box width=\"80px\">\n                    <Text ml={2} textAlign=\"left\">\n                      {\" \"}\n                      = ${position.value.toFixed(2)}\n                    </Text>\n                  </Box>\n                  <AccordionIcon />\n                </Flex>\n              </AccordionButton>\n              <AccordionPanel pb={4}>\n                {position.name === \"Ether\" && (\n                  <TransactionList chain=\"eth\" decimals={position.decimals} />\n                )}\n              </AccordionPanel>\n            </AccordionItem>\n          ))}\n      </Accordion>\n    </VStack>\n  );\n};\n","import { useEffect } from \"react\";\nimport { Box, Heading } from \"@chakra-ui/react\";\nimport { TokenTable } from \"../components/Blocks/TokenTable\";\nimport { useExperts } from \"../contexts/expertsContext\";\n\nexport const PortfolioPrices = () => {\n  const { setActionMode, setDialog } = useExperts();\n\n  useEffect(() => {\n    setActionMode(\"portfolio\");\n    setDialog(\"Select a currency to view transaction histories.\");\n  });\n\n  return (\n    <Box align=\"center\">\n      <Heading>Portfolio and Prices</Heading>\n      <br />\n      <TokenTable />\n    </Box>\n  );\n};\n","import React, { useState, useContext } from \"react\";\n\nconst ActionsContext = React.createContext();\n\nexport const useActions = () => useContext(ActionsContext);\n\nexport const ActionsProvider = (props) => {\n  const [fromSymbol, setFromSymbol] = useState(\"\");\n  const [fromAddress, setFromAddress] = useState(\"\");\n  const [toSymbol, setToSymbol] = useState(\"\");\n  const [toAddress, setToAddress] = useState(\"\");\n  const [txAmount, setTxAmount] = useState(\"\");\n\n  return (\n    <ActionsContext.Provider\n      value={{\n        fromSymbol,\n        setFromSymbol,\n        fromAddress,\n        setFromAddress,\n        toSymbol,\n        setToSymbol,\n        toAddress,\n        setToAddress,\n        txAmount,\n        setTxAmount,\n      }}\n    >\n      {props.children}\n    </ActionsContext.Provider>\n  );\n};\n\nexport default ActionsContext;\n","import { Box, FormControl, FormErrorMessage, Select } from \"@chakra-ui/react\";\nimport { usePositions } from \"../../hooks/usePositions\";\nimport { useActions } from \"../../contexts/actionsContext\";\nimport { useExperts } from \"../../contexts/expertsContext\";\n\nexport const FromSelect = () => {\n  const { positions, waiting } = usePositions();\n  const { setFromAddress, setFromSymbol, setToSymbol, setTxAmount } =\n    useActions();\n  const { setDialog, setActionMode } = useExperts();\n\n  const handleChange = (e) => {\n    let selectedIndex = e.target.options.selectedIndex - 1;\n    setActionMode(\"recieve\");\n    if (selectedIndex > 0) {\n      setFromSymbol(positions[selectedIndex].symbol);\n      setFromAddress(positions[selectedIndex].tokenAddress);\n      setDialog(\n        \"Use the 'Select amount' to set how much \" +\n          positions[selectedIndex].symbol +\n          \" to use in this action. \"\n      );\n    } else {\n      setTxAmount(0);\n      setFromSymbol(\"\");\n      setToSymbol(\"\");\n      setDialog(\n        \"Use the 'Select a token to act with' menu \" +\n          \"to start creating an action plan.\"\n      );\n    }\n  };\n\n  return (\n    <Box width=\"100%\">\n      <FormControl id=\"swapfrom\" boxShadow=\"dark-lg\" isRequired>\n        <Select\n          id=\"fromToken\"\n          placeholder=\"Select a token to act with.\"\n          boxShadow=\"dark-lg\"\n          onChange={handleChange}\n        >\n          {!waiting &&\n            positions.map((position) => {\n              return (\n                <option key={position.symbol}>\n                  From {position.tokens && position.tokens.toPrecision(3)}{\" \"}\n                  {position.name} @ $\n                  {position.price && position.price.toFixed(2)}/\n                  {position.symbol && position.symbol.toUpperCase()} = $\n                  {position?.value.toFixed(2)}\n                </option>\n              );\n            })}\n        </Select>\n        <FormErrorMessage>\n          Please select from the tokens in your portfolio.\n        </FormErrorMessage>\n      </FormControl>\n    </Box>\n  );\n};\n","import {\n  Box,\n  FormControl,\n  FormErrorMessage,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n} from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { usePositions } from \"../../hooks/usePositions\";\nimport { useActions } from \"../../contexts/actionsContext\";\nimport { useExperts } from \"../../contexts/expertsContext\";\n\nexport const AmountSelect = () => {\n  const [maxSpend, setMaxSpend] = useState(0);\n  const [decimals, setDecimals] = useState(18);\n  const [value, setValue] = useState(0);\n  const { positions, waiting } = usePositions();\n  const { fromSymbol, setTxAmount } = useActions();\n  const { setActionMode, setDialog } = useExperts();\n\n  const format = (val) =>\n    fromSymbol === undefined ? \"\" : val + \" \" + fromSymbol?.toUpperCase();\n\n  const parse = (val) =>\n    fromSymbol === undefined\n      ? \"\"\n      : val.replace(\" \" + fromSymbol?.toUpperCase(), \"\");\n\n  useEffect(() => {\n    let position = {};\n    if (!waiting) {\n      if (fromSymbol) {\n        position = positions.find(\n          (position) =>\n            position.symbol.toUpperCase() === fromSymbol?.toUpperCase()\n        );\n        setMaxSpend(position ? position.tokens : 0);\n        setDecimals(position ? position.decimals : 0);\n      } else {\n        console.log(\"AmountSelect::useEffect::!waiting::noFromSymbol.\");\n      }\n    } else {\n      console.log(\"AmountSelect::useEffect::waiting.\");\n    }\n    setActionMode(\"recieve\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [positions, fromSymbol, waiting]);\n\n  return (\n    <Box>\n      <FormControl id=\"swapamount\" isRequired>\n        <NumberInput\n          enable={fromSymbol ? 1 : 0}\n          step={maxSpend / 10}\n          max={maxSpend}\n          min={0}\n          precision={3}\n          boxShadow=\"dark-lg\"\n          onChange={(valueString) => {\n            setValue(parse(valueString));\n            setTxAmount(valueString * 10 ** decimals);\n            if (valueString > 0) {\n              setDialog(\n                \"Now using \" +\n                  ((100 * valueString) / maxSpend).toFixed(0) +\n                  \"% of your \" +\n                  fromSymbol +\n                  \" in this action.  \" +\n                  \"Press one of the action buttons \" +\n                  \"when you are ready \" +\n                  \"to choose what to do with these tokens.\"\n              );\n            } else {\n              setDialog(\n                \"Use the up and down arrows \" +\n                  \"to select how much \" +\n                  fromSymbol +\n                  \" to use in this action.  \" +\n                  \"Arrows step in 10% increments of your balance.\"\n              );\n            }\n          }}\n          value={format(value)}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormErrorMessage>Please select an available amount.</FormErrorMessage>\n      </FormControl>\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport { useActions } from \"../../contexts/actionsContext\";\n\nexport const StartSend = () => {\n  const { fromSymbol, fromAddress, toSymbol, toAddress, txAmount } =\n    useActions();\n\n  return (\n    <Box>\n      <FormControl id=\"sendstart\">\n        <Tooltip label=\"Preview token transmission.\">\n          <Button\n            enabled={txAmount > 0 ? \"true\" : \"false\"}\n            boxShadow=\"dark-lg\"\n            onClick={() => {\n              console.groupCollapsed(\"StartSend\");\n              console.debug(\"Received fromSymbol: \", fromSymbol);\n              console.debug(\"Received fromAddress: \", fromAddress);\n              console.debug(\"Received toSymbol: \", toSymbol);\n              console.debug(\"Received toAddress \", toAddress);\n              console.debug(\"Received txAmount: \", txAmount);\n              console.groupEnd();\n            }}\n          >\n            Preview Send Order\n          </Button>\n        </Tooltip>\n        <FormErrorMessage>Well shoot.</FormErrorMessage>\n      </FormControl>\n    </Box>\n  );\n};\n","import { FormControl, Flex, FormErrorMessage, Input } from \"@chakra-ui/react\";\nimport { useActions } from \"../../contexts/actionsContext\";\n\nexport const ToAddress = () => {\n  const { fromSymbol, setToSymbol, toAddress, setToAddress } = useActions();\n  console.groupCollapsed(\"ToAddress\");\n  console.groupEnd();\n\n  const handleChange = (e) => {\n    setToSymbol(fromSymbol);\n    setToAddress(e.target.value);\n    console.groupCollapsed(\"ToAddress\");\n    console.log(\"Set toAddress:\", toAddress);\n    console.groupEnd();\n  };\n\n  return (\n    <Flex width=\"100%\">\n      <FormControl id=\"toAddress\" isRequired>\n        <Input\n          variant=\"outline\"\n          placeholder=\"Enter recipiant address\"\n          boxShadow=\"dark-lg\"\n          onChange={handleChange}\n        />\n        <FormErrorMessage>Please enter a valid address.</FormErrorMessage>\n      </FormControl>\n    </Flex>\n  );\n};\n","import { useEffect } from \"react\";\nimport { HStack, VStack, useColorMode } from \"@chakra-ui/react\";\n\nimport { useActions } from \"../../contexts/actionsContext\";\nimport { useExperts } from \"../../contexts/expertsContext\";\n\nimport { FromSelect } from \"../Bits/FromSelect\";\nimport { AmountSelect } from \"../Bits/AmountSelect\";\nimport { StartSend } from \"../Bits/StartSend\";\n\n// Send mode.\nimport { ToAddress } from \"../Bits/ToAddress\";\n\nconst lightModeBG = \"linear(to-br,blue.400,red.300,white,red.300,white)\";\nconst darkModeBG = \"linear(to-br,blue.900,grey,red.900,grey,red.900)\";\n\nexport const SendPanel = () => {\n  const { txAmount, fromSymbol, toAddress } = useActions();\n  const { setActionMode, setDialog } = useExperts();\n  const { colorMode } = useColorMode();\n\n  useEffect(() => {\n    setActionMode(\"send\");\n    setDialog(\"Select a token to send.\");\n  });\n\n  return (\n    <VStack\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth={2}\n      borderRadius=\"3xl\"\n      paddingLeft={10}\n      paddingRight={10}\n      paddingTop={5}\n      paddingBottom={5}\n      spacing={6}\n      bgGradient={colorMode === \"light\" ? lightModeBG : darkModeBG}\n    >\n      <FromSelect />\n      {fromSymbol !== \"\" && (\n        <VStack>\n          <HStack>\n            <AmountSelect />\n            {txAmount && (\n              <ToAddress visible={fromSymbol === \"\" ? \"hidden\" : \"visible\"} />\n            )}\n          </HStack>\n          {toAddress && <StartSend />}\n        </VStack>\n      )}\n      <br />\n    </VStack>\n  );\n};\n","import React, { useState, useContext } from \"react\";\n\nconst QuoteContext = React.createContext();\n\nexport const useQuote = () => useContext(QuoteContext);\n\nexport const QuoteProvider = (props) => {\n  const [quoteValid, setQuoteValid] = useState(\"false\");\n  const [fromToken, setFromToken] = useState({});\n  const [fromTokenAmount, setFromTokenAmount] = useState(0);\n  const [protocols, setProtocols] = useState([]);\n  const [toToken, setToToken] = useState({});\n  const [toTokenAmount, setToTokenAmount] = useState(0);\n  const [estimatedGas, setEstimatedGas] = useState(\"\");\n\n  return (\n    <QuoteContext.Provider\n      value={{\n        quoteValid,\n        setQuoteValid,\n        fromToken,\n        setFromToken,\n        fromTokenAmount,\n        setFromTokenAmount,\n        protocols,\n        setProtocols,\n        toToken,\n        setToToken,\n        toTokenAmount,\n        setToTokenAmount,\n        estimatedGas,\n        setEstimatedGas,\n      }}\n    >\n      {props.children}\n    </QuoteContext.Provider>\n  );\n};\n\nexport default QuoteContext;\n","import { FormControl, Flex, FormErrorMessage, Select } from \"@chakra-ui/react\";\nimport { useActions } from \"../../contexts/actionsContext\";\nimport { useExperts } from \"../../contexts/expertsContext\";\nimport { useQuote } from \"../../contexts/quoteContext\";\n\nconst offeringData = [\n  {\n    networkId: 1,\n    name: \"Polkalokr\",\n    symbol: \"lkr\",\n    address: \"0x80ce3027a70e0a928d9268994e9b85d03bd4cdcf\",\n    description: \"Customisable escrow for token economies\",\n    image:\n      \"https://assets.coingecko.com/coins/images/14692/thumb/coingeckoLogo.png?1617809622\",\n  },\n  {\n    networkId: 137,\n    name: \"ChainLink\",\n    symbol: \"link\",\n    address: \"0x53e0bca35ec356bd5dddfebbd1fc0fd03fabad39\",\n    description: \"Decentralized oracle network\",\n    image:\n      \"https://assets.coingecko.com/coins/images/877/thumb/chainlink-new-logo.png?1547034700\",\n  },\n  {\n    networkId: 137,\n    name: \"AAVE\",\n    symbol: \"aave\",\n    address: \"0xd6df932a45c0f255f85145f286ea0b292b21c90b\",\n    description: \"Decentralized money market\",\n    image:\n      \"https://assets.coingecko.com/coins/images/12645/thumb/AAVE.png?1601374110\",\n  },\n  {\n    networkId: 137,\n    name: \"Uniswap\",\n    symbol: \"uni\",\n    address: \"0xb33eaad8d922b1083446dc23f610c2567fb5180f\",\n    description: \"Decentralized Exchange\",\n    image:\n      \"https://assets.coingecko.com/coins/images/12504/thumb/uniswap-uni.png?1600306604\",\n  },\n  {\n    networkId: 137,\n    name: \"USDC\",\n    symbol: \"usdc\",\n    address: \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n    description: \"USD-backed stable coin.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/6319/thumb/USD_Coin_icon.png?1547042389\",\n  },\n  {\n    networkId: 137,\n    name: \"renBTC\",\n    symbol: \"rbtc\",\n    address: \"0xdbf31df14b66535af65aac99c32e9ea844e14501\",\n    description: \"BTC-backed stable coin\",\n    image:\n      \"https://assets.coingecko.com/coins/images/11370/thumb/Bitcoin.jpg?1628072791\",\n  },\n  {\n    networkId: 137,\n    name: \"TrustSwap\",\n    symbol: \"swap\",\n    address: \"0x3809dcdd5dde24b37abe64a5a339784c3323c44f\",\n    description: \"Decentralized exchange.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/11795/thumb/Untitled_design-removebg-preview.png?1626926355\",\n  },\n  {\n    networkId: 137,\n    name: \"SushiSwap\",\n    symbol: \"sushi\",\n    address: \"0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a\",\n    description: \"Decentralized exchange.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/12271/thumb/512x512_Logo_no_chop.png?1606986688\",\n  },\n  {\n    networkId: 137,\n    name: \"QuickSwap\",\n    symbol: \"quick\",\n    address: \"0x831753dd7087cac61ab5644b308642cc1c33dc13\",\n    description: \"Decentralized exchange\",\n    image:\n      \"https://assets.coingecko.com/coins/images/13970/thumb/1_pOU6pBMEmiL-ZJVb0CYRjQ.png?1613386659\",\n  },\n  {\n    networkId: 137,\n    name: \"Balancer\",\n    symbol: \"bal\",\n    address: \"0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3\",\n    description: \"Decentralized exchange\",\n    image:\n      \"https://assets.coingecko.com/coins/images/11683/thumb/Balancer.png?1592792958\",\n  },\n  {\n    networkId: 137,\n    name: \"DecentraLand\",\n    symbol: \"mana\",\n    address: \"0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4\",\n    description: \"Crypto VR platform.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/878/thumb/decentraland-mana.png?1550108745\",\n  },\n  {\n    networkId: 137,\n    name: \"SuperFarm\",\n    symbol: \"super\",\n    address: \"0xa1428174f516f527fafdd146b883bb4428682737\",\n    description: \"NFT Platform\",\n    image:\n      \"https://assets.coingecko.com/coins/images/14040/thumb/6YPdWn6.png?1613975899\",\n  },\n  {\n    networkId: 137,\n    name: \"Aavegotchi\",\n    symbol: \"ghst\",\n    address: \"0x385eeac5cb85a38a9a07a70c73e0a3271cfb54a7\",\n    description: \"NFT Universe governance/currency\",\n    image:\n      \"https://assets.coingecko.com/coins/images/12467/thumb/ghst_200.png?1600750321\",\n  },\n  {\n    networkId: 137,\n    name: \"The Graph\",\n    symbol: \"grt\",\n    address: \"0x5fe2b58c013d7601147dcdd68c143a77499f5531\",\n    description: \"Decentralized indexing token.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/13397/thumb/Graph_Token.png?1608145566\",\n  },\n  {\n    networkId: 137,\n    name: \"Synthetix Network Token\",\n    symbol: \"snx\",\n    address: \"0x50b728d8d964fd00c2d0aad81718b71311fef68a\",\n    description: \"Synthetic stablecoin network token.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/3406/thumb/SNX.png?1598631139\",\n  },\n  {\n    networkId: 137,\n    name: \"CyberFi\",\n    symbol: \"cfi\",\n    address: \"0xecf8f2fa183b1c4d2a269bf98a54fce86c812d3e\",\n    description: \"DeFi Automation\",\n    image:\n      \"https://assets.coingecko.com/coins/images/13112/thumb/cyberfi_logo.jpeg?1605283367\",\n  },\n  {\n    networkId: 137,\n    name: \"PolyStarter\",\n    symbol: \"polr\",\n    address: \"0x029c2bf9e5e7bf11328f045205308244e11efc46\",\n    description: \"Venture capital.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/15864/thumb/logopngnew.png?1622172524\",\n  },\n  {\n    networkId: 1,\n    name: \"ETHA Lend\",\n    symbol: \"etha\",\n    address: \"0x59e9261255644c411afdd00bd89162d09d862e38\",\n    description: \"Governance Token\",\n    image:\n      \"https://assets.coingecko.com/coins/images/14141/thumb/etha_logo200x200.png?1614646986\",\n  },\n  {\n    networkId: 137,\n    name: \"EasyFi\",\n    symbol: \"ez\",\n    address: \"0x34c1b299a74588d6abdc1b85a53345a48428a521\",\n    description: \"Layer 2 lending platform.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/12742/thumb/Logo_Icon.png?1624471467\",\n  },\n  {\n    networkId: 137,\n    name: \"ETHA Lend\",\n    symbol: \"ez\",\n    address: \"0x59e9261255644c411afdd00bd89162d09d862e38\",\n    description: \"Lending platform governance.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/14141/thumb/etha_logo200x200.png?1614646986\",\n  },\n  {\n    networkId: 1,\n    name: \"SuperFarm\",\n    symbol: \"super\",\n    address: \"0xe53ec727dbdeb9e2d5456c3be40cff031ab40a55\",\n    description:\n      \"cross-chain DeFi protocol that allows users to deploy crypto and NFT farms with no code\",\n    image:\n      \"https://assets.coingecko.com/coins/images/14040/thumb/6YPdWn6.png?1613975899\",\n  },\n  {\n    networkId: 1,\n    name: \"PolkaDex\",\n    symbol: \"pdex\",\n    address: \"0xf59ae934f6fe444afc309586cc60a84a0f89aaea\",\n    description: \"A substrate-based DEX.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/14833/thumb/dIze5Ztl_400x400.jpg?1618610724\",\n  },\n  {\n    networkId: 1,\n    name: \"Dafi-protocol\",\n    symbol: \"dafi\",\n    address: \"0xfc979087305a826c2b2a0056cfaba50aad3e6439\",\n    description: \"Creates synthetics to reward networks\",\n    image:\n      \"https://assets.coingecko.com/coins/images/14428/thumb/Dafi_Black_Icon.png?1616040406\",\n  },\n  {\n    networkId: 1,\n    name: \"Uniswap\",\n    symbol: \"uni\",\n    address: \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n    description:\n      \"Governance token for Uniswap, an Automated Market Market DEX on the Ethereum blockchain.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/12504/thumb/uniswap-uni.png?1600306604\",\n  },\n  {\n    networkId: 1,\n    name: \"ChainLink\",\n    symbol: \"link\",\n    address: \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n    description:\n      \"Chainlink is a decentralized oracle service, the first of its kind.\",\n    image:\n      \"https://assets.coingecko.com/coins/images/877/thumb/chainlink-new-logo.png?1547034700\",\n  },\n];\n\nexport const ToSelect = () => {\n  const { fromSymbol, fromAddress, setToSymbol, setToAddress, txAmount } =\n    useActions();\n  const { setDialog } = useExperts();\n  const { setQuoteValid } = useQuote();\n\n  const handleChange = async (e) => {\n    console.groupCollapsed(\"ToSelect::handleChange():\");\n    console.log(\"event:\", e);\n    console.log(\"offeringData:\", offeringData);\n    let selectedIndex = e.target.options.selectedIndex;\n    console.log(\"selectedIndex:\", selectedIndex);\n    if (selectedIndex > 0) {\n      let selectedSymbol =\n        e.target.childNodes[selectedIndex].attributes.value.value;\n      console.log(\"selectedOption:\", selectedSymbol);\n      setToSymbol(selectedSymbol.toUpperCase());\n      let selectedRecord = offeringData.find(\n        (token) => token.symbol === selectedSymbol\n      );\n      console.log(\"selectedRecord:\", selectedRecord);\n      let selectedAddress = selectedRecord.address;\n      console.log(\"selectedAddress:\", selectedAddress);\n      setToAddress(selectedAddress);\n      console.log(\"...quote request parameters:\");\n      console.log(\"fromSymbol:\", fromSymbol);\n      console.log(\"fromTokenAddress: **\", fromAddress);\n      console.log(\"toSymbol:\", selectedSymbol);\n      console.log(\"toAddress: **\", selectedAddress);\n      console.log(\"amount: **\", txAmount);\n      console.groupEnd();\n      setDialog(\n        \"Press the 'Get Swap Quote' \" +\n          \"to get a quote to swap \" +\n          fromSymbol +\n          \" to \" +\n          selectedSymbol.toUpperCase() +\n          \".\"\n      );\n    } else {\n      console.log(\"null selection made.\");\n      console.groupEnd();\n      setToSymbol(\"\");\n      setToAddress(\"\");\n      setDialog(\"Select a token to receive from the pull-down menu.\");\n    }\n    setQuoteValid(\"false\");\n  };\n\n  return (\n    <Flex width=\"100%\">\n      <FormControl id=\"swapto\" isRequired>\n        <Select\n          id=\"toToken\"\n          placeholder=\"Select a token to receive.\"\n          boxShadow=\"dark-lg\"\n          onChange={handleChange}\n        >\n          {offeringData\n            .filter(\n              (token) => token.symbol.toUpperCase() !== fromSymbol.toUpperCase()\n            )\n            .map((token) => {\n              return (\n                <option key={token.name} value={token.symbol}>\n                  Into {token.name}\n                </option>\n              );\n            })}\n        </Select>\n        <FormErrorMessage>\n          Please select from the given list of input tokens.\n        </FormErrorMessage>\n      </FormControl>\n    </Flex>\n  );\n};\n","import {\n  Heading,\n  Button,\n  IconButton,\n  Text,\n  HStack,\n  VStack,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { useMoralis } from \"react-moralis\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { useState, useEffect } from \"react\";\nimport { useExperts } from \"../../contexts/expertsContext\";\nimport { useActions } from \"../../contexts/actionsContext\";\nimport { CopyIcon } from \"@chakra-ui/icons\";\nimport { ToSelect } from \"../Bits/ToSelect\";\nimport { AmountSelect } from \"../Bits/AmountSelect\";\nimport QRCode from \"react-qr-code\";\nconst lightModeBG = \"linear(to-br,blue.400,red.300,white,red.300,white)\";\nconst darkModeBG = \"linear(to-br,blue.900,grey,red.900,grey,red.900)\";\n\nexport const AddressPanel = () => {\n  const { Moralis, isAuthenticated } = useMoralis();\n  const { colorMode } = useColorMode();\n  const { setActionMode, setDialog } = useExperts();\n  const { toSymbol, toAddress, txAmount } = useActions();\n  const [copied, setCopied] = useState(false);\n  const [data, setData] = useState(\"0x0\");\n  const user = Moralis.User.current();\n  const ethAddress = user?.attributes.ethAddress;\n\n  useEffect(() => {\n    if (copied) {\n      setActionMode(\"recieve\");\n      setDialog(\n        \"Your wallet address has been copied to the clipboard.  \" +\n          \"Paste your address as the destination \" +\n          \"in the market withdraw or send entry, \" +\n          \"then carefully check the address before sending!  \" +\n          \"Malware can change your destination address in the clipboard!\"\n      );\n      setCopied(false);\n    } else {\n      if (isAuthenticated) {\n        setData(\"ethereum:\" + user?.attributes[\"ethAddress\"] + \"?chainID:137\");\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [copied, isAuthenticated]);\n\n  return (\n    <VStack\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth={2}\n      borderRadius=\"3xl\"\n      paddingLeft={10}\n      paddingRight={10}\n      paddingTop={5}\n      paddingBottom={5}\n      spacing={6}\n      bgGradient={colorMode === \"light\" ? lightModeBG : darkModeBG}\n    >\n      <Heading>Your Address:</Heading>\n      <QRCode value={ethAddress} />\n      <HStack>\n        <Text>{ethAddress}</Text>\n        <CopyToClipboard text={data} onCopy={() => setCopied(true)}>\n          <IconButton\n            disabled={!isAuthenticated}\n            variant=\"outline\"\n            aria-label=\"Copy Address to Clipboard\"\n            icon={<CopyIcon />}\n          />\n        </CopyToClipboard>\n      </HStack>\n      {/* <Text>Configure Request:</Text>\n      <ToSelect />\n      <AmountSelect /> */}\n    </VStack>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Heading,\n  HStack,\n  VStack,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { SendPanel } from \"../components/Blocks/SendPanel\";\nimport { AddressPanel } from \"../components/Blocks/AddressPanel\";\nimport { useExperts } from \"../contexts/expertsContext\";\n\nconst lightModeBG = \"linear(to-br,blue.400,red.300,white,red.300,white)\";\nconst darkModeBG = \"linear(to-br,blue.900,grey,red.900,grey,red.900)\";\n\nexport const SendReceive = () => {\n  const { colorMode } = useColorMode();\n  const { setActionMode, setDialog } = useExperts();\n  const [localMode, setLocalMode] = useState(\"none\");\n\n  useEffect(() => {\n    setActionMode(\"send\");\n    setDialog(\"Would you like to send or receive cryptocurrency?\");\n  });\n\n  const handleSendMode = () => {\n    setLocalMode(\"send\");\n    setActionMode(\"send\");\n    setDialog(\"Select a currency to send.\");\n  };\n\n  const handleReceiveMode = () => {\n    setLocalMode(\"receive\");\n    setActionMode(\"receive\");\n    setDialog(\n      \"Copy your address for pasting or \" +\n        \"select amount to request to generate a QR code.\"\n    );\n  };\n\n  return (\n    <Box align=\"center\">\n      <Heading>Transfer Cryptocurrency</Heading>\n      <br />\n      <VStack\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        borderWidth={2}\n        borderRadius=\"3xl\"\n        paddingLeft={10}\n        paddingRight={10}\n        paddingTop={5}\n        paddingBottom={5}\n        spacing={6}\n        bgGradient={colorMode === \"light\" ? lightModeBG : darkModeBG}\n      >\n        <HStack>\n          <Button onClick={handleSendMode} boxShadow=\"dark-lg\">\n            Send\n          </Button>\n          <Button onClick={handleReceiveMode} boxShadow=\"dark-lg\">\n            Receive\n          </Button>\n        </HStack>\n      </VStack>\n      <br />\n      {localMode === \"send\" && <SendPanel />}\n      <br />\n      {localMode === \"receive\" && <AddressPanel />}\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  Tooltip,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { useActions } from \"../../contexts/actionsContext\";\nimport { useExperts } from \"../../contexts/expertsContext\";\nimport { useQuote } from \"../../contexts/quoteContext\";\n\nconst oneInchHead = \"https://api.1inch.exchange/v3.0/1/quote?\";\n\nexport const RequestQuote = () => {\n  const { fromSymbol, fromAddress, toSymbol, toAddress, txAmount } =\n    useActions();\n  const {\n    setQuoteValid,\n    setFromToken,\n    setFromTokenAmount,\n    setProtocols,\n    setToToken,\n    setToTokenAmount,\n    setEstimatedGas,\n  } = useQuote();\n  const { setDialog } = useExperts();\n  const { colorMode } = useColorMode();\n\n  const handlePress = async () => {\n    console.groupCollapsed(\"GetQuote::inputs\");\n    console.debug(\"Received fromSymbol: \", fromSymbol);\n    console.debug(\"Received fromAddress: \", fromAddress);\n    console.debug(\"Received toSymbol: \", toSymbol);\n    console.debug(\"Received toAddress \", toAddress);\n    console.debug(\"Received txAmount: \", txAmount);\n    console.groupEnd();\n\n    setDialog(\n      \"Estimating costs to swap \" + fromSymbol + \" to \" + toSymbol + \" ... \"\n    );\n\n    await fetch(\n      oneInchHead +\n        \"fromTokenAddress=\" +\n        fromAddress +\n        \"&toTokenAddress=\" +\n        toAddress +\n        \"&amount=\" +\n        txAmount\n    )\n      .then((response) => response.json())\n      .then((oneInchQuote) => {\n        console.groupCollapsed(\"RequestQuote::response.\");\n        console.log(\"Recieved Quote:\", oneInchQuote);\n        oneInchQuote.fromToken && setFromToken(oneInchQuote.fromToken);\n        oneInchQuote.fromTokenAmount &&\n          setFromTokenAmount(oneInchQuote.fromTokenAmount);\n        oneInchQuote.protocols && setProtocols(oneInchQuote.protocols[0]);\n        oneInchQuote.toToken && setToToken(oneInchQuote.toToken);\n        oneInchQuote.toTokenAmount &&\n          setToTokenAmount(oneInchQuote.toTokenAmount);\n        oneInchQuote.estimatedGas && setEstimatedGas(oneInchQuote.estimatedGas);\n        if (oneInchQuote.protocols !== undefined) {\n          setQuoteValid(\"true\");\n          setDialog(\n            \"Push 'Do it!' to execute swap.  Or adjust inputs to update quote.\"\n          );\n        } else {\n          setDialog(\n            \"Something went wrong: \" +\n              oneInchQuote.error +\n              \" re: \" +\n              oneInchQuote.message\n          );\n          setQuoteValid(\"false\");\n          return;\n        }\n        console.groupEnd();\n      });\n  };\n\n  return (\n    <Box>\n      <FormControl id=\"sendstart\">\n        <Tooltip label=\"Preview token transmission.\">\n          <Button\n            enabled={txAmount > 0 ? \"true\" : \"false\"}\n            variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n            boxShadow=\"dark-lg\"\n            onClick={handlePress}\n          >\n            Get Swap Quote\n          </Button>\n        </Tooltip>\n        <FormErrorMessage>Well shoot.</FormErrorMessage>\n      </FormControl>\n    </Box>\n  );\n};\n","import { HStack, VStack, useColorMode } from \"@chakra-ui/react\";\n\nimport { useActions } from \"../../contexts/actionsContext\";\n\nimport { FromSelect } from \"../Bits/FromSelect\";\nimport { AmountSelect } from \"../Bits/AmountSelect\";\n\n// Swap mode.\nimport { ToSelect } from \"../Bits/ToSelect\";\nimport { RequestQuote } from \"../Bits/RequestQuote\";\n\nconst lightModeBG = \"linear(to-br,blue.400,red.300,white,red.300,white)\";\nconst darkModeBG = \"linear(to-br,blue.900,grey,red.900,grey,red.900)\";\n\nexport const SwapPanel = () => {\n  const { txAmount, fromSymbol, toSymbol } = useActions();\n  const { colorMode } = useColorMode();\n\n  return (\n    <VStack\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth={2}\n      borderRadius=\"3xl\"\n      paddingLeft={10}\n      paddingRight={10}\n      paddingTop={5}\n      paddingBottom={5}\n      spacing={6}\n      bgGradient={colorMode === \"light\" ? lightModeBG : darkModeBG}\n    >\n      <FromSelect />\n      {fromSymbol !== \"\" && (\n        <>\n          <HStack>\n            <AmountSelect />\n            {txAmount && (\n              <ToSelect visible={fromSymbol === \"\" ? \"hidden\" : \"visible\"} />\n            )}\n          </HStack>\n          {toSymbol && <RequestQuote />}\n        </>\n      )}\n    </VStack>\n  );\n};\n","import { useEffect } from \"react\";\nimport { Box, Heading } from \"@chakra-ui/react\";\nimport { SwapPanel } from \"../components/Blocks/SwapPanel\";\nimport { useExperts } from \"../contexts/expertsContext\";\n\nexport const SwapTrade = () => {\n  const { setActionMode, setDialog } = useExperts();\n\n  useEffect(() => {\n    setActionMode(\"swap\");\n    setDialog(\"Select a token to convert.\");\n  });\n\n  return (\n    <Box align=\"center\">\n      <Heading>Swap/Trade</Heading>\n      <br />\n      <SwapPanel />\n    </Box>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/LadyLiberty.ded89b3f.jpg\";","import { HStack, Image, Spacer, Text, VStack } from \"@chakra-ui/react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { faCheckSquare, faCoffee } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ByMoralis } from \"react-moralis\";\nimport \"./BottomFooter.css\";\nimport ladyLib from \"../media/Padding/LadyLiberty.jpg\";\n\nlibrary.add(fab, faCheckSquare, faCoffee);\n\nexport const BottomFooter = () => {\n  return (\n    <VStack justifyContent=\"center\">\n      <Image\n        src={ladyLib}\n        width=\"400px\"\n        borderRadius=\"20px\"\n        boxShadow=\"light-lg\"\n      />\n      <br />\n      <br />\n      <HStack>\n        <ByMoralis scale=\"50\" />\n      </HStack>\n      <HStack></HStack>\n      <HStack>\n        <Text>Join the Crypto Nation: </Text>\n      </HStack>\n      <HStack>\n        <FontAwesomeIcon\n          className=\"FAIcon\"\n          icon={[\"fab\", \"discord\"]}\n          size=\"2x\"\n          color=\"lightblue\"\n        />\n        <FontAwesomeIcon\n          className=\"FAIcon\"\n          icon={[\"fab\", \"facebook-square\"]}\n          size=\"2x\"\n          color=\"lightblue\"\n        />\n        <FontAwesomeIcon\n          className=\"FAIcon\"\n          icon={[\"fab\", \"youtube-square\"]}\n          size=\"2x\"\n          color=\"lightblue\"\n        />\n        <FontAwesomeIcon\n          className=\"FAIcon\"\n          icon={[\"fab\", \"twitter-square\"]}\n          size=\"2x\"\n          color=\"lightblue\"\n        />\n      </HStack>\n      <Spacer />\n    </VStack>\n  );\n};\n","import \"./App.css\";\nimport { BrowserRouter, Link, Switch, Route } from \"react-router-dom\";\nimport { Button, VStack, HStack, useColorMode } from \"@chakra-ui/react\";\nimport { EmailIcon, LinkIcon, RepeatIcon, ViewIcon } from \"@chakra-ui/icons\";\n\nimport { useMoralis } from \"react-moralis\";\n\nimport { TopNavBar } from \"../components/Pages/TopNavBar\";\nimport { ExpertStage } from \"../screens/ExpertStage\";\nimport { BuySell } from \"../screens/BuySell\";\nimport { PortfolioPrices } from \"../screens/PortfolioPrices\";\nimport { SendReceive } from \"../screens/SendReceive\";\nimport { SwapTrade } from \"../screens/SwapTrade\";\nimport { BottomFooter } from \"../screens/BottomFooter\";\n\nconst lightModeBG = \"linear(to-br,blue.400,red.300,white,red.300,white)\";\nconst darkModeBG = \"linear(to-br,blue.900,grey,red.900,grey,red.900)\";\n\nfunction App() {\n  const { colorMode } = useColorMode();\n  const { isAuthenticated } = useMoralis();\n\n  var paddingLeft = { paddingLeft: \"10px\" };\n  return (\n    <VStack\n      height=\"100vh\"\n      bgGradient={colorMode === \"light\" ? lightModeBG : darkModeBG}\n    >\n      <br />\n      <TopNavBar />\n      <ExpertStage />\n      {isAuthenticated ? (\n        <BrowserRouter>\n          <HStack>\n            <Link to=\"/PortfolioPrices\" className=\"NavBar\">\n              <Button\n                leftIcon={<ViewIcon />}\n                boxShadow=\"dark-lg\"\n                variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n              >\n                Portfolio\n              </Button>\n            </Link>\n            <Link to=\"/SwapTrade\" className=\"NavBar\" style={paddingLeft}>\n              <Button\n                leftIcon={<RepeatIcon />}\n                boxShadow=\"dark-lg\"\n                variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n              >\n                Trade\n              </Button>\n            </Link>\n            <Link to=\"/BuySell\" className=\"NavBar\" style={paddingLeft}>\n              <Button\n                leftIcon={<LinkIcon />}\n                boxShadow=\"dark-lg\"\n                variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n              >\n                Buy Crypto\n              </Button>\n            </Link>\n            <Link to=\"/SendRecieve\" className=\"NavBar\" style={paddingLeft}>\n              <Button\n                leftIcon={<EmailIcon />}\n                boxShadow=\"dark-lg\"\n                variant={colorMode === \"light\" ? \"outline\" : \"solid\"}\n              >\n                Send/Recieve\n              </Button>\n            </Link>\n          </HStack>\n          <br />\n          <Switch>\n            <Route exact path=\"/\" component={PortfolioPrices} />\n            <Route path=\"/PortfolioPrices\" component={PortfolioPrices} />\n            <Route path=\"/SwapTrade\" component={SwapTrade} />\n            <Route path=\"/BuySell\" component={BuySell} />\n            <Route path=\"/SendRecieve\" component={SendReceive} />\n          </Switch>\n        </BrowserRouter>\n      ) : (\n        <BottomFooter />\n      )}\n    </VStack>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./components/Support/reportWebVitals\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\nimport { MoralisProvider } from \"react-moralis\";\nimport { ExpertsProvider } from \"./contexts/expertsContext\";\nimport { ActionsProvider } from \"./contexts/actionsContext\";\nimport { QuoteProvider } from \"./contexts/quoteContext\";\n\nconst theme = extendTheme({\n  config: {\n    initialColorMode: \"dark\",\n    useSystemColorMode: false,\n  },\n});\n\nconst appId = \"UeAbfYO3C29W5EHdz5c5BuCItODRdOw8RcHDpAud\";\nconst serverUrl = \"https://qvgfrpeymufw.bigmoralis.com:2053/server\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <MoralisProvider appId={appId} serverUrl={serverUrl}>\n        <ExpertsProvider>\n          <ActionsProvider>\n            <QuoteProvider>\n              <App />\n            </QuoteProvider>\n          </ActionsProvider>\n        </ExpertsProvider>\n      </MoralisProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}