{
  "address": "0x943F2188631AecC562535940346a3e6b8f6099ac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeReceiverAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LendingPoolDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LendingPoolWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnForBurning",
          "type": "uint256"
        }
      ],
      "name": "SpecifiedBurnEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceForMintingIn6dec",
          "type": "uint256"
        }
      ],
      "name": "SpecifiedMintEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressOfThisContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToApprove",
          "type": "uint256"
        }
      ],
      "name": "approveLendingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOfLevels",
          "type": "uint256"
        }
      ],
      "name": "buyLevels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcAccumulated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcAllTokensValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allTokensReturn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensToMint",
          "type": "uint256"
        }
      ],
      "name": "calcPriceForTokenMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensToBurn",
          "type": "uint256"
        }
      ],
      "name": "calcReturnForTokenBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calcSpecBurnReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "burnReturn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calcSpecMintReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userToCheck",
          "type": "address"
        }
      ],
      "name": "checkStakedBenjamins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usersStakedBNJIs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositUSDCBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userToCheck",
          "type": "address"
        }
      ],
      "name": "getInternalActiveStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeCreatedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unstaked",
              "type": "bool"
            }
          ],
          "internalType": "struct MumbaiBenjamins.Stake[]",
          "name": "stakeArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userToCheck",
          "type": "address"
        }
      ],
      "name": "getUsersActiveAndBurnableStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeCreatedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unstaked",
              "type": "bool"
            }
          ],
          "internalType": "struct MumbaiBenjamins.Stake[]",
          "name": "stakeArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "internalBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "holderOfInternalMint",
          "type": "address"
        }
      ],
      "name": "internalMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonAMUSDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonLendingPool",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonUSDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOfLevels",
          "type": "uint256"
        }
      ],
      "name": "sellLevels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userToCheck",
          "type": "address"
        }
      ],
      "name": "showAllUsersStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeCreatedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unstaked",
              "type": "bool"
            }
          ],
          "internalType": "struct MumbaiBenjamins.Stake[]",
          "name": "stakeArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showInternalAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userToCheck",
          "type": "address"
        }
      ],
      "name": "showInternalBenjamins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showStakersAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateAccumulatedReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCurveFactor",
          "type": "uint256"
        }
      ],
      "name": "updateCurveFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updatePolygonAMUSDCC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updatePolygonLendingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updatePolygonUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newstakingPeriodInSeconds",
          "type": "uint256"
        }
      ],
      "name": "updateStakingPeriodInSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newtier0feeMod",
          "type": "uint256"
        }
      ],
      "name": "updateTier0feeMod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newtier1feeMod",
          "type": "uint256"
        }
      ],
      "name": "updateTier1feeMod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newtier2feeMod",
          "type": "uint256"
        }
      ],
      "name": "updateTier2feeMod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newtier3feeMod",
          "type": "uint256"
        }
      ],
      "name": "updateTier3feeMod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newtier4feeMod",
          "type": "uint256"
        }
      ],
      "name": "updateTier4feeMod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newtier4feeMod",
          "type": "uint256"
        }
      ],
      "name": "updateTier5feeMod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAccumulated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ERC20ContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3c47fa54c5a6c482bd40ae4a317e4467b5b665c083e193b24a45d34a2700d341",
  "receipt": {
    "to": null,
    "from": "0xE51c8401fe1E70f78BBD3AC660692597D33dbaFF",
    "contractAddress": "0x943F2188631AecC562535940346a3e6b8f6099ac",
    "transactionIndex": 1,
    "gasUsed": "4414456",
    "logsBloom": "0x
    "blockHash": "0x7bc8d49446581570288314bceeda2de64066cb852e91b01b00d866b383b71fed",
    "transactionHash": "0x3c47fa54c5a6c482bd40ae4a317e4467b5b665c083e193b24a45d34a2700d341",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20131517,
        "transactionHash": "0x3c47fa54c5a6c482bd40ae4a317e4467b5b665c083e193b24a45d34a2700d341",
        "address": "0x943F2188631AecC562535940346a3e6b8f6099ac",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e51c8401fe1e70f78bbd3ac660692597d33dbaff"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x7bc8d49446581570288314bceeda2de64066cb852e91b01b00d866b383b71fed"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20131517,
        "transactionHash": "0x3c47fa54c5a6c482bd40ae4a317e4467b5b665c083e193b24a45d34a2700d341",
        "address": "0x2058A9D7613eEE744279e3856Ef0eAda5FCbaA7e",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000943f2188631aecc562535940346a3e6b8f6099ac",
          "0x0000000000000000000000009198f13b08e299d85e096929fa9781a1e3d5d827"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x7bc8d49446581570288314bceeda2de64066cb852e91b01b00d866b383b71fed"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20131517,
        "transactionHash": "0x3c47fa54c5a6c482bd40ae4a317e4467b5b665c083e193b24a45d34a2700d341",
        "address": "0x943F2188631AecC562535940346a3e6b8f6099ac",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000e51c8401fe1e70f78bbd3ac660692597d33dbaff",
        "logIndex": 5,
        "blockHash": "0x7bc8d49446581570288314bceeda2de64066cb852e91b01b00d866b383b71fed"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20131517,
        "transactionHash": "0x3c47fa54c5a6c482bd40ae4a317e4467b5b665c083e193b24a45d34a2700d341",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e51c8401fe1e70f78bbd3ac660692597d33dbaff",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002f0cc5e5451000000000000000000000000000000000000000000000000000028d82bf8c85c6000000000000000000000000000000000000000000000000c8aa83de7edc083207000000000000000000000000000000000000000000000000025e75f9a740b6000000000000000000000000000000000000000000000000c8aab2eb44c14d4207",
        "logIndex": 6,
        "blockHash": "0x7bc8d49446581570288314bceeda2de64066cb852e91b01b00d866b383b71fed"
      }
    ],
    "blockNumber": 20131517,
    "cumulativeGasUsed": "4565044",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE51c8401fe1E70f78BBD3AC660692597D33dbaFF"
  ],
  "solcInputHash": "759cd3de24852dcd23c434c21242644e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LendingPoolDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LendingPoolWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnForBurning\",\"type\":\"uint256\"}],\"name\":\"SpecifiedBurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceForMintingIn6dec\",\"type\":\"uint256\"}],\"name\":\"SpecifiedMintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressOfThisContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToApprove\",\"type\":\"uint256\"}],\"name\":\"approveLendingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfLevels\",\"type\":\"uint256\"}],\"name\":\"buyLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcAllTokensValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allTokensReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToMint\",\"type\":\"uint256\"}],\"name\":\"calcPriceForTokenMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToBurn\",\"type\":\"uint256\"}],\"name\":\"calcReturnForTokenBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcSpecBurnReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcSpecMintReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userToCheck\",\"type\":\"address\"}],\"name\":\"checkStakedBenjamins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usersStakedBNJIs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userToCheck\",\"type\":\"address\"}],\"name\":\"getInternalActiveStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCreatedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct MumbaiBenjamins.Stake[]\",\"name\":\"stakeArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userToCheck\",\"type\":\"address\"}],\"name\":\"getUsersActiveAndBurnableStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCreatedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct MumbaiBenjamins.Stake[]\",\"name\":\"stakeArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"internalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holderOfInternalMint\",\"type\":\"address\"}],\"name\":\"internalMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonAMUSDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonLendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonUSDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfLevels\",\"type\":\"uint256\"}],\"name\":\"sellLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userToCheck\",\"type\":\"address\"}],\"name\":\"showAllUsersStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCreatedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct MumbaiBenjamins.Stake[]\",\"name\":\"stakeArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showInternalAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userToCheck\",\"type\":\"address\"}],\"name\":\"showInternalBenjamins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showStakersAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateAccumulatedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCurveFactor\",\"type\":\"uint256\"}],\"name\":\"updateCurveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePolygonAMUSDCC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePolygonLendingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePolygonUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newstakingPeriodInSeconds\",\"type\":\"uint256\"}],\"name\":\"updateStakingPeriodInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtier0feeMod\",\"type\":\"uint256\"}],\"name\":\"updateTier0feeMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtier1feeMod\",\"type\":\"uint256\"}],\"name\":\"updateTier1feeMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtier2feeMod\",\"type\":\"uint256\"}],\"name\":\"updateTier2feeMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtier3feeMod\",\"type\":\"uint256\"}],\"name\":\"updateTier3feeMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtier4feeMod\",\"type\":\"uint256\"}],\"name\":\"updateTier4feeMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtier4feeMod\",\"type\":\"uint256\"}],\"name\":\"updateTier5feeMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccumulated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MumbaiBenjamins.sol\":\"MumbaiBenjamins\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/BNJICurve.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; \\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\ncontract BNJICurve is Ownable, Pausable{   \\r\\n\\r\\n  uint256 USDCscale = 10**6;  \\r\\n\\r\\n  uint256 curveFactor = 800000;\\r\\n\\r\\n  function calcPriceForTokenMint(\\r\\n    uint256 supply,    \\r\\n    uint256 tokensToMint) public view returns (uint256)\\r\\n  { \\r\\n    require(tokensToMint > 0, \\\"BNJICurve: Must mint more than 0 tokens\\\");  \\r\\n    \\r\\n    uint256 supplySquared = supply*supply;    \\r\\n\\r\\n    uint256 supplyAfterMint = supply + tokensToMint;    \\r\\n    uint256 supplyAfterMintSquared = supplyAfterMint * supplyAfterMint; \\r\\n\\r\\n    uint256 step1 = supplyAfterMintSquared - supplySquared; \\r\\n    \\r\\n    uint256 step2 = step1 * USDCscale;\\r\\n   \\r\\n    uint256 totalPriceForTokensMintingNowInUSDC6digits = step2 / curveFactor;  \\r\\n        \\r\\n    uint256 takeOffFactor = 10 ** 4;\\r\\n    \\r\\n    uint256 rest = totalPriceForTokensMintingNowInUSDC6digits % takeOffFactor;\\r\\n    \\r\\n    uint256 mintResultWithCentsroundedDown = totalPriceForTokensMintingNowInUSDC6digits - rest;\\r\\n    \\r\\n    // returning price for specified token amount\\r\\n    return mintResultWithCentsroundedDown;        \\r\\n  }\\r\\n\\r\\n  function calcReturnForTokenBurn(\\r\\n    uint256 supply,    \\r\\n    uint256 tokensToBurn) public view returns (uint256)\\r\\n  {\\r\\n    // validate input\\r\\n    \\r\\n    require(supply > 0 && tokensToBurn > 0 && supply >= tokensToBurn, \\\"BNJICurve: Sending args must be larger than 0\\\");   \\r\\n    \\r\\n    uint256 supplyAfterBurn = supply - tokensToBurn; \\r\\n\\r\\n    uint256 supplySquared = supply * supply; \\r\\n    uint256 supplyAfterBurnSquared = supplyAfterBurn * supplyAfterBurn;\\r\\n    \\r\\n    uint256 step1 = supplySquared - supplyAfterBurnSquared;    \\r\\n   \\r\\n    uint256 step2 = step1 * USDCscale ;\\r\\n    \\r\\n    uint256 returnForTokenBurnInUSDC6digits = step2/ 800000 ;\\r\\n    \\r\\n    uint256 takeOffFactor = 10 ** 4;\\r\\n   \\r\\n    uint256 rest = returnForTokenBurnInUSDC6digits % takeOffFactor;\\r\\n   \\r\\n    uint256 burnResultWithCentsroundedDown = returnForTokenBurnInUSDC6digits - rest;    \\r\\n\\r\\n    return burnResultWithCentsroundedDown;    \\r\\n  }\\r\\n  \\r\\n  // function for owner to withdraw any ERC20 token that has accumulated\\r\\n  function updateCurveFactor (uint256 newCurveFactor) public onlyOwner {\\r\\n    curveFactor = newCurveFactor;\\r\\n  }\\r\\n\\r\\n  // function for owner to withdraw any ERC20 token that has accumulated\\r\\n  function withdrawERC20 (address ERC20ContractAddress, uint256 amount) public onlyOwner {\\r\\n    IERC20 ERC20Instance = IERC20(ERC20ContractAddress);        \\r\\n    ERC20Instance.transfer(msg.sender, amount);         \\r\\n  }\\r\\n\\r\\n  // pausing funcionality from OpenZeppelin's Pausable\\r\\n  function pause() public onlyOwner {\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  // unpausing funcionality from OpenZeppelin's Pausable\\r\\n  function unpause() public onlyOwner {\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x46671c06a70b44a87ac0c04e1c869d0330c15250092686bd5388579ed8941cfd\",\"license\":\"UNLICENSED\"},\"contracts/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //tokens addresses\\r\\n    address aTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint8 id;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: Reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\r\\n}\\r\\n\\r\\ninterface ILendingPool {\\r\\n\\t/**\\r\\n\\t * @dev Emitted on deposit()\\r\\n\\t * @param reserve The address of the underlying asset of the reserve\\r\\n\\t * @param user The address initiating the deposit\\r\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\r\\n\\t * @param amount The amount deposited\\r\\n\\t * @param referral The referral code used\\r\\n\\t **/\\r\\n\\tevent Deposit(\\r\\n\\t\\taddress indexed reserve,\\r\\n\\t\\taddress user,\\r\\n\\t\\taddress indexed onBehalfOf,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint16 indexed referral\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted on withdraw()\\r\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\r\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\r\\n\\t * @param to Address that will receive the underlying\\r\\n\\t * @param amount The amount to be withdrawn\\r\\n\\t **/\\r\\n\\tevent Withdraw(\\r\\n\\t\\taddress indexed reserve,\\r\\n\\t\\taddress indexed user,\\r\\n\\t\\taddress indexed to,\\r\\n\\t\\tuint256 amount\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n\\t * @param reserve The address of the underlying asset being borrowed\\r\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n\\t * initiator of the transaction on flashLoan()\\r\\n\\t * @param onBehalfOf The address that will be getting the debt\\r\\n\\t * @param amount The amount borrowed out\\r\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\r\\n\\t * @param referral The referral code used\\r\\n\\t **/\\r\\n\\tevent Borrow(\\r\\n\\t\\taddress indexed reserve,\\r\\n\\t\\taddress user,\\r\\n\\t\\taddress indexed onBehalfOf,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 borrowRateMode,\\r\\n\\t\\tuint256 borrowRate,\\r\\n\\t\\tuint16 indexed referral\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted on repay()\\r\\n\\t * @param reserve The address of the underlying asset of the reserve\\r\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n\\t * @param amount The amount repaid\\r\\n\\t **/\\r\\n\\tevent Repay(\\r\\n\\t\\taddress indexed reserve,\\r\\n\\t\\taddress indexed user,\\r\\n\\t\\taddress indexed repayer,\\r\\n\\t\\tuint256 amount\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted on swapBorrowRateMode()\\r\\n\\t * @param reserve The address of the underlying asset of the reserve\\r\\n\\t * @param user The address of the user swapping his rate mode\\r\\n\\t * @param rateMode The rate mode that the user wants to swap to\\r\\n\\t **/\\r\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n\\t * @param reserve The address of the underlying asset of the reserve\\r\\n\\t * @param user The address of the user enabling the usage as collateral\\r\\n\\t **/\\r\\n\\tevent ReserveUsedAsCollateralEnabled(\\r\\n\\t\\taddress indexed reserve,\\r\\n\\t\\taddress indexed user\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n\\t * @param reserve The address of the underlying asset of the reserve\\r\\n\\t * @param user The address of the user enabling the usage as collateral\\r\\n\\t **/\\r\\n\\tevent ReserveUsedAsCollateralDisabled(\\r\\n\\t\\taddress indexed reserve,\\r\\n\\t\\taddress indexed user\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\r\\n\\t * @param reserve The address of the underlying asset of the reserve\\r\\n\\t * @param user The address of the user for which the rebalance has been executed\\r\\n\\t **/\\r\\n\\tevent RebalanceStableBorrowRate(\\r\\n\\t\\taddress indexed reserve,\\r\\n\\t\\taddress indexed user\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted on flashLoan()\\r\\n\\t * @param target The address of the flash loan receiver contract\\r\\n\\t * @param initiator The address initiating the flash loan\\r\\n\\t * @param asset The address of the asset being flash borrowed\\r\\n\\t * @param amount The amount flash borrowed\\r\\n\\t * @param premium The fee flash borrowed\\r\\n\\t * @param referralCode The referral code used\\r\\n\\t **/\\r\\n\\tevent FlashLoan(\\r\\n\\t\\taddress indexed target,\\r\\n\\t\\taddress indexed initiator,\\r\\n\\t\\taddress indexed asset,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 premium,\\r\\n\\t\\tuint16 referralCode\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when the pause is triggered.\\r\\n\\t */\\r\\n\\tevent Paused();\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when the pause is lifted.\\r\\n\\t */\\r\\n\\tevent Unpaused();\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\r\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\r\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\r\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n\\t * @param user The address of the borrower getting liquidated\\r\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\r\\n\\t * @param liquidator The address of the liquidator\\r\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n\\t * to receive the underlying collateral asset directly\\r\\n\\t **/\\r\\n\\tevent LiquidationCall(\\r\\n\\t\\taddress indexed collateralAsset,\\r\\n\\t\\taddress indexed debtAsset,\\r\\n\\t\\taddress indexed user,\\r\\n\\t\\tuint256 debtToCover,\\r\\n\\t\\tuint256 liquidatedCollateralAmount,\\r\\n\\t\\taddress liquidator,\\r\\n\\t\\tbool receiveAToken\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\r\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\r\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\r\\n\\t * gets added to the LendingPool ABI\\r\\n\\t * @param reserve The address of the underlying asset of the reserve\\r\\n\\t * @param liquidityRate The new liquidity rate\\r\\n\\t * @param stableBorrowRate The new stable borrow rate\\r\\n\\t * @param variableBorrowRate The new variable borrow rate\\r\\n\\t * @param liquidityIndex The new liquidity index\\r\\n\\t * @param variableBorrowIndex The new variable borrow index\\r\\n\\t **/\\r\\n\\tevent ReserveDataUpdated(\\r\\n\\t\\taddress indexed reserve,\\r\\n\\t\\tuint256 liquidityRate,\\r\\n\\t\\tuint256 stableBorrowRate,\\r\\n\\t\\tuint256 variableBorrowRate,\\r\\n\\t\\tuint256 liquidityIndex,\\r\\n\\t\\tuint256 variableBorrowIndex\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\r\\n\\t * @param asset The address of the underlying asset to deposit\\r\\n\\t * @param amount The amount to be deposited\\r\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n\\t *   is a different wallet\\r\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\r\\n\\t **/\\r\\n\\tfunction deposit(\\r\\n\\t\\taddress asset,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress onBehalfOf,\\r\\n\\t\\tuint16 referralCode\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n\\t * @param asset The address of the underlying asset to withdraw\\r\\n\\t * @param amount The underlying amount to be withdrawn\\r\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n\\t *   different wallet\\r\\n\\t * @return The final amount withdrawn\\r\\n\\t **/\\r\\n\\tfunction withdraw(\\r\\n\\t\\taddress asset,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress to\\r\\n\\t) external returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n\\t * @param asset The address of the underlying asset to borrow\\r\\n\\t * @param amount The amount to be borrowed\\r\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\r\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n\\t * if he has been given credit delegation allowance\\r\\n\\t **/\\r\\n\\tfunction borrow(\\r\\n\\t\\taddress asset,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 interestRateMode,\\r\\n\\t\\tuint16 referralCode,\\r\\n\\t\\taddress onBehalfOf\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n\\t * @param amount The amount to repay\\r\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n\\t * other borrower whose debt should be removed\\r\\n\\t * @return The final amount repaid\\r\\n\\t **/\\r\\n\\tfunction repay(\\r\\n\\t\\taddress asset,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 rateMode,\\r\\n\\t\\taddress onBehalfOf\\r\\n\\t) external returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\r\\n\\t * @param asset The address of the underlying asset borrowed\\r\\n\\t * @param rateMode The rate mode that the user wants to swap to\\r\\n\\t **/\\r\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\r\\n\\t *     1. Usage ratio is above 95%\\r\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\r\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\r\\n\\t * @param asset The address of the underlying asset borrowed\\r\\n\\t * @param user The address of the user to be rebalanced\\r\\n\\t **/\\r\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\r\\n\\t * @param asset The address of the underlying asset deposited\\r\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\r\\n\\t **/\\r\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\r\\n\\t\\texternal;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n\\t * @param user The address of the borrower getting liquidated\\r\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n\\t * to receive the underlying collateral asset directly\\r\\n\\t **/\\r\\n\\tfunction liquidationCall(\\r\\n\\t\\taddress collateralAsset,\\r\\n\\t\\taddress debtAsset,\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 debtToCover,\\r\\n\\t\\tbool receiveAToken\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n\\t * as long as the amount taken plus a fee is returned.\\r\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\r\\n\\t * For further details please visit https://developers.aave.com\\r\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\r\\n\\t * @param assets The addresses of the assets being flash-borrowed\\r\\n\\t * @param amounts The amounts amounts being flash-borrowed\\r\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\r\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\r\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\r\\n\\t **/\\r\\n\\tfunction flashLoan(\\r\\n\\t\\taddress receiverAddress,\\r\\n\\t\\taddress[] calldata assets,\\r\\n\\t\\tuint256[] calldata amounts,\\r\\n\\t\\tuint256[] calldata modes,\\r\\n\\t\\taddress onBehalfOf,\\r\\n\\t\\tbytes calldata params,\\r\\n\\t\\tuint16 referralCode\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the user account data across all the reserves\\r\\n\\t * @param user The address of the user\\r\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\r\\n\\t * @return totalDebtETH the total debt in ETH of the user\\r\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\r\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\r\\n\\t * @return ltv the loan to value of the user\\r\\n\\t * @return healthFactor the current health factor of the user\\r\\n\\t **/\\r\\n\\tfunction getUserAccountData(address user)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256 totalCollateralETH,\\r\\n\\t\\t\\tuint256 totalDebtETH,\\r\\n\\t\\t\\tuint256 availableBorrowsETH,\\r\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\r\\n\\t\\t\\tuint256 ltv,\\r\\n\\t\\t\\tuint256 healthFactor\\r\\n\\t\\t);\\r\\n\\r\\n\\tfunction initReserve(\\r\\n\\t\\taddress reserve,\\r\\n\\t\\taddress aTokenAddress,\\r\\n\\t\\taddress stableDebtAddress,\\r\\n\\t\\taddress variableDebtAddress,\\r\\n\\t\\taddress interestRateStrategyAddress\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction setReserveInterestRateStrategyAddress(\\r\\n\\t\\taddress reserve,\\r\\n\\t\\taddress rateStrategyAddress\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the configuration of the reserve\\r\\n\\t * @param asset The address of the underlying asset of the reserve\\r\\n\\t * @return The configuration of the reserve\\r\\n\\t **/\\r\\n\\tfunction getConfiguration(address asset)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the configuration of the user across all the reserves\\r\\n\\t * @param user The user address\\r\\n\\t * @return The configuration of the user\\r\\n\\t **/\\r\\n\\tfunction getUserConfiguration(address user)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the normalized income normalized income of the reserve\\r\\n\\t * @param asset The address of the underlying asset of the reserve\\r\\n\\t * @return The reserve's normalized income\\r\\n\\t */\\r\\n\\tfunction getReserveNormalizedIncome(address asset)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the normalized variable debt per unit of asset\\r\\n\\t * @param asset The address of the underlying asset of the reserve\\r\\n\\t * @return The reserve normalized variable debt\\r\\n\\t */\\r\\n\\tfunction getReserveNormalizedVariableDebt(address asset)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the state and configuration of the reserve\\r\\n\\t * @param asset The address of the underlying asset of the reserve\\r\\n\\t * @return The state of the reserve\\r\\n\\t **/\\r\\n\\tfunction getReserveData(address asset)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (DataTypes.ReserveData memory);\\r\\n\\r\\n\\tfunction finalizeTransfer(\\r\\n\\t\\taddress asset,\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 balanceFromAfter,\\r\\n\\t\\tuint256 balanceToBefore\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction getReservesList() external view returns (address[] memory);\\r\\n\\r\\n\\tfunction getAddressesProvider()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (ILendingPoolAddressesProvider);\\r\\n\\r\\n\\tfunction setPause(bool val) external;\\r\\n\\r\\n\\tfunction paused() external view returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title LendingPoolAddressesProvider contract\\r\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\r\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\r\\n * - Owned by the Aave Governance\\r\\n * @author Aave\\r\\n **/\\r\\ninterface ILendingPoolAddressesProvider {\\r\\n\\tevent MarketIdSet(string newMarketId);\\r\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\r\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\r\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\r\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\r\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\r\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\r\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\r\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\r\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\r\\n\\r\\n\\tfunction getMarketId() external view returns (string memory);\\r\\n\\r\\n\\tfunction setMarketId(string calldata marketId) external;\\r\\n\\r\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\r\\n\\r\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n\\tfunction getLendingPool() external view returns (address);\\r\\n\\r\\n\\tfunction setLendingPoolImpl(address pool) external;\\r\\n\\r\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\r\\n\\r\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\r\\n\\r\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\r\\n\\r\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\r\\n\\r\\n\\tfunction getPoolAdmin() external view returns (address);\\r\\n\\r\\n\\tfunction setPoolAdmin(address admin) external;\\r\\n\\r\\n\\tfunction getEmergencyAdmin() external view returns (address);\\r\\n\\r\\n\\tfunction setEmergencyAdmin(address admin) external;\\r\\n\\r\\n\\tfunction getPriceOracle() external view returns (address);\\r\\n\\r\\n\\tfunction setPriceOracle(address priceOracle) external;\\r\\n\\r\\n\\tfunction getLendingRateOracle() external view returns (address);\\r\\n\\r\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\r\\n}\",\"keccak256\":\"0xf92cb60a6a985e46b4b25b366fe16187b7c9c41b25acb63851be8e6624b9cfac\",\"license\":\"agpl-3.0\"},\"contracts/MumbaiBenjamins.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BNJICurve.sol\\\";\\r\\nimport \\\"./ILendingPool.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract MumbaiBenjamins is ERC20, BNJICurve, ReentrancyGuard {   // <==== changed_ for Mumbai testnet\\r\\n  using SafeMath for uint256;\\r\\n \\r\\n  address public addressOfThisContract;\\r\\n\\r\\n  address private feeReceiver; \\r\\n  address private accumulatedReceiver;   \\r\\n\\r\\n  address[] private stakers;\\r\\n  address[] private internalAddresses;\\r\\n\\r\\n  mapping (address => uint256) private ownedBenjamins;\\r\\n  mapping (address => uint256) private internalBenjamins;\\r\\n  mapping (address => uint256) private totalStakedByUser;\\r\\n  mapping (address => bool) private isOnStakingList;\\r\\n  mapping (address => bool) private isOnInternalList;\\r\\n  mapping (address => Stake[]) private usersStakingPositions;\\r\\n  mapping (address => Stake[]) private internalStakingPositions;  \\r\\n\\r\\n  struct Stake {\\r\\n    address stakingAddress;\\r\\n    uint256 stakeID;\\r\\n    uint256 tokenAmount;    \\r\\n    uint256 stakeCreatedTimestamp; \\r\\n    bool unstaked;\\r\\n  }\\r\\n\\r\\n  uint8 private amountDecimals;\\r\\n  uint256 largestUint = type(uint256).max;\\r\\n\\r\\n  uint256 centsScale4digits = 10000;\\r\\n  uint256 dollarScale6dec = 1000000;\\r\\n\\r\\n  uint256 stakingPeriodInSeconds = 1; // 86400; <===== XXXXX, changed_ only for testing\\r\\n\\r\\n  uint256 tier_0_feeMod = 100;\\r\\n  uint256 tier_1_feeMod = 95;\\r\\n  uint256 tier_2_feeMod = 85;\\r\\n  uint256 tier_3_feeMod = 70;\\r\\n  uint256 tier_4_feeMod = 50;\\r\\n  uint256 tier_5_feeMod = 25;   \\r\\n\\r\\n  ILendingPool public polygonLendingPool;\\r\\n  IERC20 public polygonUSDC;\\r\\n  IERC20 public polygonAMUSDC;\\r\\n\\r\\n  event SpecifiedMintEvent (address sender, uint256 tokenAmount, uint256 priceForMintingIn6dec);  \\r\\n\\r\\n  event SpecifiedBurnEvent (address sender, uint256 tokenAmount, uint256 returnForBurning);  \\r\\n\\r\\n  event LendingPoolDeposit (uint256 amount);\\r\\n  \\r\\n  event LendingPoolWithdrawal (uint256 amount);\\r\\n\\r\\n  constructor(address feeReceiverAddress) ERC20(\\\"MumbaiBenjamins\\\", \\\"MumBenj\\\") {     // <==== changed_ for Mumbai testnet\\r\\n    addressOfThisContract = address(this);\\r\\n    feeReceiver = feeReceiverAddress;\\r\\n    amountDecimals = 0;\\r\\n    //polygonUSDC = IERC20(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174);               <==== changed_ for Mumbai testnet\\r\\n    //polygonAMUSDC = IERC20(0x1a13F4Ca1d028320A707D99520AbFefca3998b7F);             <==== changed_ for Mumbai testnet\\r\\n    //polygonLendingPool = ILendingPool(0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf);  <==== changed_ for Mumbai testnet       \\r\\n    \\r\\n    polygonUSDC = IERC20(0x2058A9D7613eEE744279e3856Ef0eAda5FCbaA7e);               // <==== changed_ for Mumbai testnet\\r\\n    polygonAMUSDC = IERC20(0x2271e3Fef9e15046d09E1d78a8FF038c691E9Cf9);             // <==== changed_ for Mumbai testnet\\r\\n    polygonLendingPool = ILendingPool(0x9198F13B08E299d85E096929fA9781A1E3d5d827);  // <==== changed_ for Mumbai testnet   \\r\\n\\r\\n    approveLendingPool(largestUint);    \\r\\n    pause();\\r\\n  }\\r\\n\\r\\n  receive() external payable {   \\r\\n  }\\r\\n\\r\\n\\r\\n  function approveLendingPool (uint256 amountToApprove) public onlyOwner {   \\r\\n    polygonUSDC.approve(address(polygonLendingPool), amountToApprove);       \\r\\n  }\\r\\n\\r\\n  \\r\\n  function decimals() public view override returns (uint8) {\\r\\n    return amountDecimals;\\r\\n  }\\r\\n  \\r\\n  function findUsersLevelFeeModifier (address user) private view returns (uint256 usersFee) {\\r\\n\\r\\n    uint256 usersStakedBalance = checkStakedBenjamins(user);\\r\\n    \\r\\n    if (usersStakedBalance < 20) {\\r\\n      return tier_0_feeMod;\\r\\n    }\\r\\n    else if (usersStakedBalance >= 20 && usersStakedBalance < 40 ) {\\r\\n      return tier_1_feeMod;\\r\\n    }    \\r\\n    else if (usersStakedBalance >= 40 && usersStakedBalance < 60) {\\r\\n      return tier_2_feeMod;\\r\\n    }\\r\\n    else if (usersStakedBalance >= 60 && usersStakedBalance < 80) {\\r\\n      return tier_3_feeMod;\\r\\n    }  \\r\\n    else if (usersStakedBalance >= 80 && usersStakedBalance < 100) {\\r\\n      return tier_4_feeMod;\\r\\n    } \\r\\n    else if (usersStakedBalance >= 100 ) {\\r\\n      return tier_5_feeMod;\\r\\n    } \\r\\n    \\r\\n  }\\r\\n\\r\\n  function getUsersActiveAndBurnableStakes (address userToCheck) public view returns (Stake[] memory stakeArray){    \\r\\n\\r\\n    uint256 timestampNow = uint256(block.timestamp);\\r\\n\\r\\n    uint256 nrOfActiveBurnableStakes;\\r\\n\\r\\n    Stake[] memory usersStakeArray = usersStakingPositions[userToCheck];\\r\\n\\r\\n    for (uint256 index = 0; index < usersStakeArray.length; index++) {       \\r\\n                           \\r\\n      uint256 unlockTimeStamp = usersStakeArray[index].stakeCreatedTimestamp + stakingPeriodInSeconds;  \\r\\n      \\r\\n      // each time an active and burnable stake is found, nrOfActiveBurnableStakes is increased by 1\\r\\n      if (usersStakeArray[index].unstaked == false && unlockTimeStamp <= timestampNow ) {\\r\\n        nrOfActiveBurnableStakes++;\\r\\n      }    \\r\\n\\r\\n    }\\r\\n\\r\\n    if (nrOfActiveBurnableStakes == 0){\\r\\n      return new Stake[](0);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      // 'activeBurnableStakes' array with hardcoded length, defined by active stakes found above\\r\\n      Stake[] memory activeBurnableStakes = new Stake[](nrOfActiveBurnableStakes);      \\r\\n\\r\\n      // index position in activeBurnableStakes array\\r\\n      uint256 newIndex = 0 ;\\r\\n\\r\\n      for (uint256 k = 0; k < activeBurnableStakes.length; k++) {\\r\\n        \\r\\n        // each time an active stake is found, its details are put into the next position in the 'activeBurnableStakes' array\\r\\n        if (usersStakeArray[k].unstaked == false) {\\r\\n          activeBurnableStakes[newIndex].stakingAddress = usersStakeArray[newIndex].stakingAddress;\\r\\n          activeBurnableStakes[newIndex].stakeID = usersStakeArray[newIndex].stakeID;\\r\\n          activeBurnableStakes[newIndex].tokenAmount = usersStakeArray[newIndex].tokenAmount;\\r\\n          activeBurnableStakes[newIndex].stakeCreatedTimestamp = usersStakeArray[newIndex].stakeCreatedTimestamp;\\r\\n          activeBurnableStakes[newIndex].unstaked = usersStakeArray[newIndex].unstaked;\\r\\n          newIndex++;\\r\\n        }         \\r\\n\\r\\n      }\\r\\n      // returning activeBurnableStakes array\\r\\n      return activeBurnableStakes; \\r\\n\\r\\n    } \\r\\n    \\r\\n  } \\r\\n\\r\\n  \\r\\n\\r\\n  /*\\r\\n  function specifiedMint( uint256 tokenAmountToMint) public whenNotPaused {        \\r\\n    specifiedAmountMint(tokenAmountToMint);\\r\\n  }\\r\\n  */\\r\\n\\r\\n  function buyLevels(uint256 amountOfLevels) public whenNotPaused {\\r\\n    specifiedAmountMint(amountOfLevels * 20);\\r\\n  }\\r\\n\\r\\n  function specifiedAmountMint(uint256 amount) internal whenNotPaused nonReentrant returns (uint256) {   \\r\\n    \\r\\n    require((amount % 20 == 0), \\\"BNJ, specifiedAmountMint: Amount must be divisible by 20\\\");       \\r\\n    \\r\\n    uint256 priceForMintingIn6dec = calcSpecMintReturn(amount);\\r\\n    \\r\\n    uint256 usersFeeModifier = findUsersLevelFeeModifier( msg.sender ); \\r\\n\\r\\n    uint256 feeIn6dec = ((priceForMintingIn6dec * usersFeeModifier) /100) /100;\\r\\n    \\r\\n    uint256 roundThisDown = feeIn6dec % (10**4);\\r\\n    \\r\\n    uint256 feeRoundedDownIn6dec = feeIn6dec - roundThisDown;\\r\\n    \\r\\n    uint256 endPriceIn6dec = priceForMintingIn6dec + feeRoundedDownIn6dec;\\r\\n    \\r\\n    uint256 polygonUSDCbalanceIn6dec = polygonUSDC.balanceOf( msg.sender ) ;\\r\\n    \\r\\n    uint256 USDCAllowancein6dec = polygonUSDC.allowance(msg.sender, addressOfThisContract); \\r\\n    \\r\\n    require (endPriceIn6dec <= polygonUSDCbalanceIn6dec, \\\"BNJ, specifiedAmountMint: Not enough USDC\\\"); \\r\\n    require (endPriceIn6dec <= USDCAllowancein6dec, \\\"BNJ, specifiedAmountMint: Not enough allowance in USDC for payment\\\" );\\r\\n    require (priceForMintingIn6dec >= 5000000, \\\"BNJ, specifiedAmountMint: Minimum minting value of $5 USDC\\\" );\\r\\n    \\r\\n    polygonUSDC.transferFrom(msg.sender, feeReceiver, feeRoundedDownIn6dec);   \\r\\n\\r\\n    polygonUSDC.transferFrom(msg.sender, addressOfThisContract, priceForMintingIn6dec);  \\r\\n\\r\\n    depositIntoLendingPool(priceForMintingIn6dec);      \\r\\n  \\r\\n    // minting to Benjamins contract itself\\r\\n    _mint(addressOfThisContract, amount);\\r\\n    emit SpecifiedMintEvent(msg.sender, amount, priceForMintingIn6dec);\\r\\n\\r\\n    // this is the user's balance of tokens\\r\\n    ownedBenjamins[msg.sender] += amount;\\r\\n\\r\\n    uint256 amountOfLevelsToBuy = amount / 20;\\r\\n\\r\\n    for (uint256 index = 0; index < amountOfLevelsToBuy; index++) {\\r\\n      stakeTokens(msg.sender, 20);\\r\\n    }     \\r\\n\\r\\n    return priceForMintingIn6dec;   \\r\\n  }  \\r\\n\\r\\n  function calcSpecMintReturn(uint256 amount) public view returns (uint256 mintPrice) {\\r\\n    return calcPriceForTokenMint(totalSupply(), amount); \\r\\n  }    \\r\\n\\r\\n  /*\\r\\n  function specifiedBurn( uint256 tokenAmountToBurn) public payable whenNotPaused {    \\r\\n    specifiedAmountBurn(tokenAmountToBurn);\\r\\n  }\\r\\n  */\\r\\n\\r\\n  function sellLevels(uint256 amountOfLevels) public whenNotPaused {\\r\\n    specifiedAmountBurn(amountOfLevels * 20);\\r\\n  }\\r\\n\\r\\n  function specifiedAmountBurn(uint256 amount) internal whenNotPaused nonReentrant returns (uint256) {    \\r\\n\\r\\n    require((amount % 20) == 0, \\\"BNJ, specifiedAmountMint: Amount must be divisible by 20\\\");   \\r\\n\\r\\n    uint256 tokenBalance = checkStakedBenjamins(msg.sender);    \\r\\n     \\r\\n    require(amount > 0, \\\"Amount to burn must be more than zero.\\\");  \\r\\n    require(tokenBalance >= amount, \\\"Users tokenBalance must be equal to or more than amount to burn.\\\");             \\r\\n    \\r\\n    uint256 returnForBurningIn6dec = calcSpecBurnReturn(amount);\\r\\n    \\r\\n    require (returnForBurningIn6dec >= 5000000, \\\"BNJ, specifiedAmountBurn: Minimum burning value is $5 USDC\\\" );\\r\\n\\r\\n    uint256 usersFeeModifier = findUsersLevelFeeModifier( msg.sender );\\r\\n\\r\\n    uint256 feeIn6dec = ((returnForBurningIn6dec * usersFeeModifier) /100) / 100;   \\r\\n    \\r\\n    uint256 roundThisDown = feeIn6dec % (10**4);\\r\\n    \\r\\n    uint256 feeRoundedDown = feeIn6dec - roundThisDown;\\r\\n   \\r\\n    uint256 endReturnIn6dec = returnForBurningIn6dec - feeRoundedDown;      \\r\\n\\r\\n    uint256 amountOfLevelsToSell = amount / 20;\\r\\n\\r\\n    for (uint256 index = 0; index < amountOfLevelsToSell; index++) {\\r\\n      unstakeTokens(msg.sender, 20);\\r\\n    }   \\r\\n\\r\\n    // this is the user's balance of tokens\\r\\n    ownedBenjamins[msg.sender] -= amount;\\r\\n\\r\\n    _burn(addressOfThisContract, amount);      \\r\\n    emit SpecifiedBurnEvent(msg.sender, amount, returnForBurningIn6dec);      \\r\\n\\r\\n\\r\\n    withdrawFromLendingPool(returnForBurningIn6dec); \\r\\n\\r\\n    polygonUSDC.transfer(feeReceiver, feeRoundedDown);\\r\\n    polygonUSDC.transfer(msg.sender, endReturnIn6dec);     \\r\\n    \\r\\n    \\r\\n\\r\\n    return returnForBurningIn6dec;   \\r\\n  }\\r\\n\\r\\n  function calcSpecBurnReturn(uint256 amount) public view returns (uint256 burnReturn) {    \\r\\n    //console.log(\\\"BNJ, calcSpecBurnReturn, totalsupply:\\\", totalSupply() );\\r\\n    //console.log(\\\"BNJ, calcSpecBurnReturn, amount:\\\", amount );\\r\\n    return calcReturnForTokenBurn(totalSupply(), amount); \\r\\n  }      \\r\\n\\r\\n  function stakeTokens(address stakingUserAddress, uint256 amountOfTokensToStake) private {\\r\\n    uint256 tokensOwned = checkOwnedBenjamins( stakingUserAddress ) ;    \\r\\n\\r\\n    require (amountOfTokensToStake <= tokensOwned, 'BNJ, stakeTokens: Not enough tokens'); \\r\\n\\r\\n    if (!isOnStakingList[stakingUserAddress]) {\\r\\n      stakers.push(stakingUserAddress);\\r\\n      isOnStakingList[stakingUserAddress] = true;\\r\\n    }\\r\\n\\r\\n    uint256 stakeID = usersStakingPositions[stakingUserAddress].length;\\r\\n\\r\\n    Stake memory newStake = Stake({ \\r\\n      stakingAddress: address(stakingUserAddress),\\r\\n      stakeID: uint256(stakeID),\\r\\n      tokenAmount: uint256(amountOfTokensToStake),      \\r\\n      stakeCreatedTimestamp: uint256(block.timestamp),\\r\\n      unstaked: false       \\r\\n    });        \\r\\n\\r\\n    usersStakingPositions[stakingUserAddress].push(newStake);\\r\\n\\r\\n    totalStakedByUser[stakingUserAddress] += amountOfTokensToStake;\\r\\n  }\\r\\n\\r\\n  function unstakeTokens(address stakingUserAddress, uint256 amountOfTokensToUnstake) private {\\r\\n\\r\\n    uint256 tokensStaked = checkStakedBenjamins( stakingUserAddress ) ;    \\r\\n\\r\\n    require (amountOfTokensToUnstake <= tokensStaked, 'BNJ, unstakeTokens: Not enough tokens'); \\r\\n   \\r\\n    Stake[] memory usersActiveBurnableStakess = getUsersActiveAndBurnableStakes(stakingUserAddress);\\r\\n\\r\\n    require (usersActiveBurnableStakess.length > 0, 'BNJ, unstakeTokens: No burnable staking positions found. Consider time since staking.');\\r\\n\\r\\n    uint256 newestActiveStake = usersActiveBurnableStakess.length - 1;\\r\\n\\r\\n    uint256 stakeIDtoUnstake = usersActiveBurnableStakess[newestActiveStake].stakeID;    \\r\\n\\r\\n    for (uint256 unStIndex = 0; unStIndex < usersStakingPositions[stakingUserAddress].length; unStIndex++) {\\r\\n      if (usersStakingPositions[stakingUserAddress][unStIndex].stakeID == stakeIDtoUnstake ) {\\r\\n        usersStakingPositions[stakingUserAddress][unStIndex].unstaked = true;\\r\\n      }\\r\\n    }    \\r\\n\\r\\n    totalStakedByUser[stakingUserAddress] -= amountOfTokensToUnstake;\\r\\n  }\\r\\n\\r\\n  function checkOwnedBenjamins(address userToCheck) private view returns (uint256 usersOwnedBNJIs){\\r\\n    return ownedBenjamins[userToCheck];\\r\\n  }\\r\\n\\r\\n  function showInternalAddresses() public view onlyOwner returns (address[] memory) {\\r\\n    return internalAddresses;  \\r\\n  }\\r\\n\\r\\n function showStakersAddresses() public view onlyOwner returns (address[] memory) {\\r\\n    return stakers;  \\r\\n  }\\r\\n  \\r\\n  \\r\\n  function checkStakedBenjamins(address userToCheck) public view returns (uint256 usersStakedBNJIs){   // XXXXX <=======changed_ this only for testing, should be private visibility\\r\\n    uint256 usersTotalStake = totalStakedByUser[userToCheck];\\r\\n   \\r\\n    return usersTotalStake;\\r\\n  }   \\r\\n\\r\\n  function depositIntoLendingPool(uint256 amount) private {    \\r\\n\\t\\tpolygonLendingPool.deposit(address(polygonUSDC), amount, addressOfThisContract, 0);    \\r\\n    emit LendingPoolDeposit(amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawFromLendingPool(uint256 amount) private whenNotPaused {\\r\\n\\t\\tpolygonLendingPool.withdraw(address(polygonUSDC), amount, addressOfThisContract);\\r\\n    emit LendingPoolWithdrawal(amount);\\r\\n\\t}\\r\\n \\r\\n  \\r\\n  function internalMint(uint256 amount, address holderOfInternalMint) public onlyOwner returns (uint256) {\\r\\n   \\r\\n    if (!isOnInternalList[holderOfInternalMint]) {\\r\\n      internalAddresses.push(holderOfInternalMint);\\r\\n      isOnInternalList[holderOfInternalMint] = true;\\r\\n    }\\r\\n    \\r\\n    require(amount > 0, \\\"BNJ, internalMint: Amount must be more than zero.\\\");        \\r\\n    require(amount % 20 == 0, \\\"BNJ, internalMint: Amount must be divisible by 20\\\");   \\r\\n    \\r\\n    uint256 priceForMintingIn6dec = calcSpecMintReturn(amount);    \\r\\n\\r\\n    uint256 polygonUSDCbalanceIn6dec = polygonUSDC.balanceOf( msg.sender ) ;   \\r\\n\\r\\n    uint256 USDCAllowancein6dec = polygonUSDC.allowance(msg.sender, addressOfThisContract);     \\r\\n    \\r\\n    require (priceForMintingIn6dec <= polygonUSDCbalanceIn6dec, \\\"BNJ, internalMint: Not enough USDC\\\"); \\r\\n    require (priceForMintingIn6dec <= USDCAllowancein6dec, \\\"BNJ, internalMint: Not enough allowance in USDC for payment\\\" );\\r\\n    require (priceForMintingIn6dec >= 5000000, \\\"BNJ, internalMint: Minimum minting value of $5 USDC\\\" );      \\r\\n\\r\\n    polygonUSDC.transferFrom(msg.sender, addressOfThisContract, priceForMintingIn6dec);\\r\\n    depositIntoLendingPool(priceForMintingIn6dec);    \\r\\n  \\r\\n    // minting to Benjamins contract itself\\r\\n    _mint(addressOfThisContract, amount);\\r\\n    emit SpecifiedMintEvent(msg.sender, amount, priceForMintingIn6dec);\\r\\n\\r\\n    // this is the user's balance of tokens\\r\\n    internalBenjamins[holderOfInternalMint] += amount;    \\r\\n\\r\\n    return priceForMintingIn6dec; \\r\\n  }\\r\\n\\r\\n  function internalBurn(uint256 amount) public whenNotPaused nonReentrant returns (uint256) {   \\r\\n\\r\\n    require(amount % 20 == 0, \\\"BNJ, internalBurn: Amount must be divisible by 20\\\");   \\r\\n\\r\\n    uint256 tokenBalance = internalBenjamins[msg.sender];  \\r\\n     \\r\\n    require(amount > 0, \\\"Amount to burn must be more than zero.\\\");  \\r\\n    require(tokenBalance >= amount, \\\"Users tokenBalance must be equal to or more than amount to burn.\\\");             \\r\\n    \\r\\n    uint256 returnForBurningIn6dec = calcSpecBurnReturn(amount);    \\r\\n\\r\\n    require (returnForBurningIn6dec >= 5000000, \\\"BNJ, internalBurn: Minimum burning value is $5 USDC\\\" );    \\r\\n\\r\\n    // this is the user's balance of tokens\\r\\n    internalBenjamins[msg.sender] -= amount;\\r\\n\\r\\n    _burn(addressOfThisContract, amount);      \\r\\n    emit SpecifiedBurnEvent(msg.sender, amount, returnForBurningIn6dec);  \\r\\n\\r\\n    withdrawFromLendingPool(returnForBurningIn6dec); \\r\\n   \\r\\n    polygonUSDC.transfer(msg.sender, returnForBurningIn6dec);  \\r\\n\\r\\n    return returnForBurningIn6dec;   \\r\\n  }\\r\\n\\r\\n  function showAllUsersStakes(address userToCheck) public view onlyOwner returns (Stake[] memory stakeArray) { \\r\\n    return usersStakingPositions[userToCheck];\\r\\n  }\\r\\n\\r\\n  function showInternalBenjamins (address userToCheck) public view onlyOwner returns (uint256) {   \\r\\n    return internalBenjamins[userToCheck];\\r\\n  }\\r\\n\\r\\n  function getInternalActiveStakes(address userToCheck) public view onlyOwner returns (Stake[] memory stakeArray){\\r\\n\\r\\n    uint256 nrOfActiveStakes;\\r\\n\\r\\n    Stake[] memory usersStakeArray = internalStakingPositions[userToCheck];\\r\\n\\r\\n    for (uint256 index = 0; index < usersStakeArray.length; index++) { \\r\\n\\r\\n      // each time an active stake is found, nrOfActiveStakes is increased by 1\\r\\n      if (usersStakeArray[index].unstaked == false) {\\r\\n        nrOfActiveStakes++;\\r\\n      }     \\r\\n    }\\r\\n\\r\\n    if (nrOfActiveStakes == 0){\\r\\n      return new Stake[](0);\\r\\n    }\\r\\n\\r\\n    else {\\r\\n      // 'activeStakes' array with hardcoded length, defined by active stakes found above\\r\\n      Stake[] memory activeStakes = new Stake[](nrOfActiveStakes);      \\r\\n\\r\\n      // index position in activeStakes array\\r\\n      uint256 newIndex = 0 ;\\r\\n\\r\\n      for (uint256 k = 0; k < activeStakes.length; k++) {\\r\\n        \\r\\n        // each time an active stake is found, its details are put into the next position in the 'activeStakes' array\\r\\n        if (usersStakeArray[k].unstaked == false) {\\r\\n          activeStakes[newIndex].stakingAddress = usersStakeArray[newIndex].stakingAddress;\\r\\n          activeStakes[newIndex].stakeID = usersStakeArray[newIndex].stakeID;          \\r\\n          activeStakes[newIndex].tokenAmount = usersStakeArray[newIndex].tokenAmount;\\r\\n          activeStakes[newIndex].stakeCreatedTimestamp = usersStakeArray[newIndex].stakeCreatedTimestamp;\\r\\n          activeStakes[newIndex].unstaked = usersStakeArray[newIndex].unstaked;\\r\\n          newIndex++;\\r\\n        }         \\r\\n\\r\\n      }\\r\\n      // returning activeStakes array\\r\\n      return activeStakes; \\r\\n\\r\\n    } \\r\\n    \\r\\n  } \\r\\n\\r\\n  function calcAccumulated() public view onlyOwner returns (uint256 accumulatedAmount) {\\r\\n    uint256 allTokensValue = calcAllTokensValue();\\r\\n    uint256 allTokensValueBuffered = (allTokensValue * 97) / 100;\\r\\n\\r\\n    uint256 allAMUSDC = polygonAMUSDC.balanceOf(addressOfThisContract);\\r\\n\\r\\n    uint256 accumulated = allTokensValueBuffered - allAMUSDC;\\r\\n    return accumulated;\\r\\n\\r\\n  }   \\r\\n\\r\\n  function withdrawAccumulated(uint256 amount) public onlyOwner {\\r\\n    polygonAMUSDC.transfer(accumulatedReceiver, amount);\\r\\n  } \\r\\n\\r\\n  function depositUSDCBuffer (uint256 amount) public onlyOwner {\\r\\n    polygonLendingPool.deposit(address(polygonUSDC), amount, addressOfThisContract, 0);    \\r\\n    emit LendingPoolDeposit(amount);\\r\\n  } \\r\\n\\r\\n  function calcAllTokensValue() public view onlyOwner returns (uint256 allTokensReturn) {\\r\\n    return calcReturnForTokenBurn(totalSupply(), totalSupply()); \\r\\n  }\\r\\n\\r\\n  function updateStakingPeriodInSeconds (uint256 newstakingPeriodInSeconds) public onlyOwner {\\r\\n    stakingPeriodInSeconds = newstakingPeriodInSeconds;\\r\\n  }  \\r\\n\\r\\n  function updateFeeReceiver(address newAddress) public onlyOwner {\\r\\n    require(newAddress != address(0), \\\"updateFeeReceiver: newAddress cannot be the zero address\\\");\\r\\n    feeReceiver = newAddress;\\r\\n  }\\r\\n\\r\\n  function updateAccumulatedReceiver(address newAddress) public onlyOwner {\\r\\n    require(newAddress != address(0), \\\"updateAccumulatedReceiver: newAddress cannot be the zero address\\\");\\r\\n    accumulatedReceiver = newAddress;\\r\\n  }  \\r\\n\\r\\n  function updatePolygonUSDC(address newAddress) public onlyOwner {\\r\\n    require(newAddress != address(0), \\\"updatePolygonUSDC: newAddress cannot be the zero address\\\");\\r\\n    polygonUSDC = IERC20(newAddress);\\r\\n  }\\r\\n\\r\\n  function updatePolygonAMUSDCC(address newAddress) public onlyOwner {\\r\\n    require(newAddress != address(0), \\\"updatePolygonAMUSDCC: newAddress cannot be the zero address\\\");\\r\\n    polygonAMUSDC = IERC20(newAddress);\\r\\n  }\\r\\n\\r\\n  function updatePolygonLendingPool(address newAddress) public onlyOwner {\\r\\n    require(newAddress != address(0), \\\"updatePolygonLendingPool: newAddress cannot be the zero address\\\");\\r\\n    polygonLendingPool = ILendingPool(newAddress);\\r\\n  }\\r\\n    \\r\\n  function updateTier0feeMod (uint256 newtier0feeMod) public onlyOwner {\\r\\n    tier_0_feeMod = newtier0feeMod;\\r\\n  }\\r\\n\\r\\n  function updateTier1feeMod (uint256 newtier1feeMod) public onlyOwner {\\r\\n    tier_1_feeMod = newtier1feeMod;\\r\\n  }\\r\\n\\r\\n  function updateTier2feeMod (uint256 newtier2feeMod) public onlyOwner {\\r\\n    tier_2_feeMod = newtier2feeMod;\\r\\n  }\\r\\n\\r\\n  function updateTier3feeMod (uint256 newtier3feeMod) public onlyOwner {\\r\\n    tier_3_feeMod = newtier3feeMod;\\r\\n  }\\r\\n\\r\\n  function updateTier4feeMod (uint256 newtier4feeMod) public onlyOwner {\\r\\n    tier_4_feeMod = newtier4feeMod;\\r\\n  } \\r\\n\\r\\n  function updateTier5feeMod (uint256 newtier4feeMod) public onlyOwner {\\r\\n    tier_5_feeMod = newtier4feeMod;\\r\\n  }   \\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x88871b68d375947891c5df2948506f265e48a7e14a5c0e0ee23605ac34fc5a43\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080604052620f4240600655620c3500600755600019601655612710601755620f424060185560016019556064601a55605f601b556055601c556046601d556032601e556019601f553480156200005557600080fd5b5060405162004acf38038062004acf833981016040819052620000789162000495565b604080518082018252600f81526e4d756d62616942656e6a616d696e7360881b60208083019182528351808501909452600784526626bab6a132b73560c91b908401528151919291620000ce91600391620003ef565b508051620000e4906004906020840190620003ef565b5050506000620000f96200020660201b60201c565b600580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506005805460ff60a01b191690556001600855600980546001600160a01b03199081163017909155600a80546001600160a01b0384169083161790556015805460ff19169055602180548216732058a9d7613eee744279e3856ef0eada5fcbaa7e179055602280548216732271e3fef9e15046d09e1d78a8ff038c691e9cf917905560208054909116739198f13b08e299d85e096929fa9781a1e3d5d827179055601654620001f5906200020a565b620001ff620002e9565b5062000528565b3390565b6005546001600160a01b03163314620002595760405162461bcd60e51b8152602060048201819052602482015260008051602062004aaf83398151915260448201526064015b60405180910390fd5b60215460205460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015620002aa57600080fd5b505af1158015620002bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e59190620004c7565b5050565b6005546001600160a01b03163314620003345760405162461bcd60e51b8152602060048201819052602482015260008051602062004aaf833981519152604482015260640162000250565b6200033e62000340565b565b62000354600554600160a01b900460ff1690565b15620003965760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000250565b6005805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620003d23390565b6040516001600160a01b03909116815260200160405180910390a1565b828054620003fd90620004eb565b90600052602060002090601f0160209004810192826200042157600085556200046c565b82601f106200043c57805160ff19168380011785556200046c565b828001600101855582156200046c579182015b828111156200046c5782518255916020019190600101906200044f565b506200047a9291506200047e565b5090565b5b808211156200047a57600081556001016200047f565b600060208284031215620004a857600080fd5b81516001600160a01b0381168114620004c057600080fd5b9392505050565b600060208284031215620004da57600080fd5b81518015158114620004c057600080fd5b600181811c908216806200050057607f821691505b602082108114156200052257634e487b7160e01b600052602260045260246000fd5b50919050565b61457780620005386000396000f3fe6080604052600436106103545760003560e01c8063851955d0116101c6578063bcde5a1a116100f7578063dd62ed3e11610095578063e4bbe7eb1161006f578063e4bbe7eb14610a16578063e8e6f9ad14610a36578063f2fde38b14610a56578063f98b242f14610a7657600080fd5b8063dd62ed3e14610990578063e32cb6d8146109d6578063e47bb97b146109f657600080fd5b8063c346e980116100d1578063c346e98014610910578063c69bebe414610930578063cfad0eb614610950578063d948e1041461097057600080fd5b8063bcde5a1a146108b0578063bdb21b58146108d0578063bfb8ec30146108f057600080fd5b8063a457c2d711610164578063a9059cbb1161013e578063a9059cbb1461083b578063ab5b84311461085b578063ad8e763314610870578063b0de36801461089057600080fd5b8063a457c2d7146107d9578063a6ecdb29146107f9578063a7b9c8ae1461081b57600080fd5b80638da5cb5b116101a05780638da5cb5b146107665780638fb330171461078457806395d89b41146107a4578063a1db9782146107b957600080fd5b8063851955d0146107065780638922bd35146107265780638ac69e971461074657600080fd5b806339509351116102a05780635c975abb1161023e5780636c752974116102185780636c7529741461068657806370a08231146106a6578063715018a6146106dc5780638456cb59146106f157600080fd5b80635c975abb1461061a5780635f03e6441461063957806360bd13291461065957600080fd5b806346c105251161027a57806346c10525146105845780634cd6dc28146105a45780634f12192c146105da57806356d2ec1b146105fa57600080fd5b8063395093511461052f5780633f4ba83a1461054f578063413712941461056457600080fd5b8063160873151161030d578063257a0050116102e7578063257a0050146104ad57806326b9dfa4146104cd5780632853c2f7146104ed578063313ce5671461050d57600080fd5b8063160873151461045857806318160ddd1461047857806323b872dd1461048d57600080fd5b8063030942321461036057806306fdde031461038257806307b76354146103ad578063095ea7b3146103d057806310b4afb314610400578063126d8c2a1461043857600080fd5b3661035b57005b600080fd5b34801561036c57600080fd5b5061038061037b3660046140e5565b610a8b565b005b34801561038e57600080fd5b50610397610ac3565b6040516103a49190614237565b60405180910390f35b3480156103b957600080fd5b506103c2610b55565b6040519081526020016103a4565b3480156103dc57600080fd5b506103f06103eb366004614099565b610c43565b60405190151581526020016103a4565b34801561040c57600080fd5b50600954610420906001600160a01b031681565b6040516001600160a01b0390911681526020016103a4565b34801561044457600080fd5b506103c2610453366004614008565b610c59565b34801561046457600080fd5b50610380610473366004614008565b610ca6565b34801561048457600080fd5b506002546103c2565b34801561049957600080fd5b506103f06104a836600461405d565b610d69565b3480156104b957600080fd5b506103806104c8366004614008565b610e1a565b3480156104d957600080fd5b506103806104e83660046140e5565b610ee2565b3480156104f957600080fd5b506103806105083660046140e5565b610f11565b34801561051957600080fd5b5060155460405160ff90911681526020016103a4565b34801561053b57600080fd5b506103f061054a366004614099565b610f40565b34801561055b57600080fd5b50610380610f77565b34801561057057600080fd5b5061038061057f3660046140e5565b610fab565b34801561059057600080fd5b5061038061059f3660046140e5565b610fec565b3480156105b057600080fd5b506103c26105bf366004614008565b6001600160a01b031660009081526010602052604090205490565b3480156105e657600080fd5b506103806105f53660046140e5565b61101b565b34801561060657600080fd5b506103c26106153660046140e5565b61104a565b34801561062657600080fd5b50600554600160a01b900460ff166103f0565b34801561064557600080fd5b506103c26106543660046140e5565b6112e9565b34801561066557600080fd5b50610679610674366004614008565b611303565b6040516103a491906141be565b34801561069257600080fd5b50602154610420906001600160a01b031681565b3480156106b257600080fd5b506103c26106c1366004614008565b6001600160a01b031660009081526020819052604090205490565b3480156106e857600080fd5b506103806113da565b3480156106fd57600080fd5b5061038061144e565b34801561071257600080fd5b506103806107213660046140e5565b611480565b34801561073257600080fd5b506103806107413660046140e5565b6114bd565b34801561075257600080fd5b506103806107613660046140e5565b611570565b34801561077257600080fd5b506005546001600160a01b0316610420565b34801561079057600080fd5b50602254610420906001600160a01b031681565b3480156107b057600080fd5b5061039761159f565b3480156107c557600080fd5b506103806107d4366004614099565b6115ae565b3480156107e557600080fd5b506103f06107f4366004614099565b611660565b34801561080557600080fd5b5061080e6116fb565b6040516103a4919061417d565b34801561082757600080fd5b506103806108363660046140e5565b611787565b34801561084757600080fd5b506103f0610856366004614099565b6117ec565b34801561086757600080fd5b5061080e6117f9565b34801561087c57600080fd5b5061038061088b366004614008565b611884565b34801561089c57600080fd5b506103806108ab3660046140e5565b61194c565b3480156108bc57600080fd5b506106796108cb366004614008565b611a2c565b3480156108dc57600080fd5b506103806108eb3660046140e5565b611daf565b3480156108fc57600080fd5b5061067961090b366004614008565b611dde565b34801561091c57600080fd5b506103c261092b3660046140e5565b612143565b34801561093c57600080fd5b5061038061094b366004614008565b612157565b34801561095c57600080fd5b5061038061096b366004614008565b61221a565b34801561097c57600080fd5b50602054610420906001600160a01b031681565b34801561099c57600080fd5b506103c26109ab36600461402a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156109e257600080fd5b506103c26109f1366004614117565b6122e4565b348015610a0257600080fd5b50610380610a113660046140e5565b6127ea565b348015610a2257600080fd5b506103c2610a3136600461413a565b612819565b348015610a4257600080fd5b506103c2610a5136600461413a565b612920565b348015610a6257600080fd5b50610380610a71366004614008565b6129db565b348015610a8257600080fd5b506103c2612ac6565b6005546001600160a01b03163314610abe5760405162461bcd60e51b8152600401610ab590614314565b60405180910390fd5b601b55565b606060038054610ad290614485565b80601f0160208091040260200160405190810160405280929190818152602001828054610afe90614485565b8015610b4b5780601f10610b2057610100808354040283529160200191610b4b565b820191906000526020600020905b815481529060010190602001808311610b2e57829003601f168201915b5050505050905090565b6005546000906001600160a01b03163314610b825760405162461bcd60e51b8152600401610ab590614314565b6000610b8c612ac6565b905060006064610b9d83606161444f565b610ba7919061443b565b6022546009546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a082319060240160206040518083038186803b158015610bf457600080fd5b505afa158015610c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2c91906140fe565b90506000610c3a828461446e565b94505050505090565b6000610c50338484612b0c565b50600192915050565b6005546000906001600160a01b03163314610c865760405162461bcd60e51b8152600401610ab590614314565b506001600160a01b0381166000908152600f60205260409020545b919050565b6005546001600160a01b03163314610cd05760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038116610d475760405162461bcd60e51b815260206004820152603860248201527f757064617465506f6c79676f6e555344433a206e6577416464726573732063616044820152776e6e6f7420626520746865207a65726f206164647265737360401b6064820152608401610ab5565b602180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610d76848484612c31565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610dfb5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610ab5565b610e0f8533610e0a868561446e565b612b0c565b506001949350505050565b6005546001600160a01b03163314610e445760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038116610ec05760405162461bcd60e51b815260206004820152603f60248201527f757064617465506f6c79676f6e4c656e64696e67506f6f6c3a206e657741646460448201527f726573732063616e6e6f7420626520746865207a65726f2061646472657373006064820152608401610ab5565b602080546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610f0c5760405162461bcd60e51b8152600401610ab590614314565b601c55565b6005546001600160a01b03163314610f3b5760405162461bcd60e51b8152600401610ab590614314565b600755565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c50918590610e0a908690614423565b6005546001600160a01b03163314610fa15760405162461bcd60e51b8152600401610ab590614314565b610fa9612e09565b565b600554600160a01b900460ff1615610fd55760405162461bcd60e51b8152600401610ab5906142ea565b610fe8610fe382601461444f565b612ea6565b5050565b6005546001600160a01b031633146110165760405162461bcd60e51b8152600401610ab590614314565b601e55565b6005546001600160a01b031633146110455760405162461bcd60e51b8152600401610ab590614314565b601f55565b600554600090600160a01b900460ff16156110775760405162461bcd60e51b8152600401610ab5906142ea565b6002600854141561109a5760405162461bcd60e51b8152600401610ab5906143a6565b60026008556110aa6014836144d5565b156111115760405162461bcd60e51b815260206004820152603160248201527f424e4a2c20696e7465726e616c4275726e3a20416d6f756e74206d757374206260448201527006520646976697369626c6520627920323607c1b6064820152608401610ab5565b336000908152600f60205260409020548261113e5760405162461bcd60e51b8152600401610ab5906143dd565b8281101561115e5760405162461bcd60e51b8152600401610ab59061428c565b600061116984612143565b9050624c4b408110156111da5760405162461bcd60e51b815260206004820152603360248201527f424e4a2c20696e7465726e616c4275726e3a204d696e696d756d206275726e696044820152726e672076616c7565206973202435205553444360681b6064820152608401610ab5565b336000908152600f6020526040812080548692906111f990849061446e565b9091555050600954611214906001600160a01b0316856133df565b7fdbba09fffb965fc22fc44dbcfae24c5fa3c095c5e59ad4934a8d71c2980eeda73385836040516112479392919061415c565b60405180910390a16112588161352e565b60215460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156112a457600080fd5b505af11580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc91906140c3565b5060016008559392505050565b60006112fd6112f760025490565b83612920565b92915050565b6005546060906001600160a01b031633146113305760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038216600090815260136020908152604080832080548251818502810185019093528083529193909284015b828210156113cf5760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff16151560808301529083529092019101611363565b505050509050919050565b6005546001600160a01b031633146114045760405162461bcd60e51b8152600401610ab590614314565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b031633146114785760405162461bcd60e51b8152600401610ab590614314565b610fa961361c565b600554600160a01b900460ff16156114aa5760405162461bcd60e51b8152600401610ab5906142ea565b610fe86114b882601461444f565b613681565b6005546001600160a01b031633146114e75760405162461bcd60e51b8152600401610ab590614314565b60215460205460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044015b602060405180830381600087803b15801561153857600080fd5b505af115801561154c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe891906140c3565b6005546001600160a01b0316331461159a5760405162461bcd60e51b8152600401610ab590614314565b601d55565b606060048054610ad290614485565b6005546001600160a01b031633146115d85760405162461bcd60e51b8152600401610ab590614314565b60405163a9059cbb60e01b81523360048201526024810182905282906001600160a01b0382169063a9059cbb90604401602060405180830381600087803b15801561162257600080fd5b505af1158015611636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165a91906140c3565b50505050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156116e25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610ab5565b6116f13385610e0a868561446e565b5060019392505050565b6005546060906001600160a01b031633146117285760405162461bcd60e51b8152600401610ab590614314565b600c805480602002602001604051908101604052809291908181526020018280548015610b4b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611760575050505050905090565b6005546001600160a01b031633146117b15760405162461bcd60e51b8152600401610ab590614314565b602254600b5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb9060440161151e565b6000610c50338484612c31565b6005546060906001600160a01b031633146118265760405162461bcd60e51b8152600401610ab590614314565b600d805480602002602001604051908101604052809291908181526020018280548015610b4b576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611760575050505050905090565b6005546001600160a01b031633146118ae5760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b03811661192a5760405162461bcd60e51b815260206004820152603b60248201527f757064617465506f6c79676f6e414d55534443433a206e65774164647265737360448201527f2063616e6e6f7420626520746865207a65726f206164647265737300000000006064820152608401610ab5565b602280546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146119765760405162461bcd60e51b8152600401610ab590614314565b60205460215460095460405163e8eda9df60e01b81526001600160a01b0392831660048201526024810185905290821660448201526000606482015291169063e8eda9df90608401600060405180830381600087803b1580156119d857600080fd5b505af11580156119ec573d6000803e3d6000fd5b505050507fe4b07db4e98b8c4d7db7898ec0ca1004b8d388810ececa888262a4e5886027a981604051611a2191815260200190565b60405180910390a150565b6001600160a01b0381166000908152601360209081526040808320805482518185028101850190935280835260609442949093849390929091849084015b82821015611ad65760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff16151560808301529083529092019101611a6a565b50505050905060005b8151811015611b6b576000601954838381518110611aff57611aff614515565b602002602001015160600151611b159190614423565b9050828281518110611b2957611b29614515565b602090810291909101015160800151158015611b455750848111155b15611b585783611b54816144ba565b9450505b5080611b63816144ba565b915050611adf565b5081611bac576040805160008082526020820190925290611ba2565b611b8f613fb7565b815260200190600190039081611b875790505b5095945050505050565b60008267ffffffffffffffff811115611bc757611bc761452b565b604051908082528060200260200182016040528015611c0057816020015b611bed613fb7565b815260200190600190039081611be55790505b5090506000805b8251811015611da357838181518110611c2257611c22614515565b602090810291909101015160800151611d9157838281518110611c4757611c47614515565b602002602001015160000151838381518110611c6557611c65614515565b60209081029190910101516001600160a01b0390911690528351849083908110611c9157611c91614515565b602002602001015160200151838381518110611caf57611caf614515565b60200260200101516020018181525050838281518110611cd157611cd1614515565b602002602001015160400151838381518110611cef57611cef614515565b60200260200101516040018181525050838281518110611d1157611d11614515565b602002602001015160600151838381518110611d2f57611d2f614515565b60200260200101516060018181525050838281518110611d5157611d51614515565b602002602001015160800151838381518110611d6f57611d6f614515565b602090810291909101015190151560809091015281611d8d816144ba565b9250505b80611d9b816144ba565b915050611c07565b50909695505050505050565b6005546001600160a01b03163314611dd95760405162461bcd60e51b8152600401610ab590614314565b601955565b6005546060906001600160a01b03163314611e0b5760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038216600090815260146020908152604080832080548251818502810185019093528083528493849084015b82821015611eaa5760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff16151560808301529083529092019101611e3e565b50505050905060005b8151811015611f0157818181518110611ece57611ece614515565b602090810291909101015160800151611eef5782611eeb816144ba565b9350505b80611ef9816144ba565b915050611eb3565b5081611f41576040805160008082526020820190925290611f38565b611f25613fb7565b815260200190600190039081611f1d5790505b50949350505050565b60008267ffffffffffffffff811115611f5c57611f5c61452b565b604051908082528060200260200182016040528015611f9557816020015b611f82613fb7565b815260200190600190039081611f7a5790505b5090506000805b825181101561213857838181518110611fb757611fb7614515565b60209081029190910101516080015161212657838281518110611fdc57611fdc614515565b602002602001015160000151838381518110611ffa57611ffa614515565b60209081029190910101516001600160a01b039091169052835184908390811061202657612026614515565b60200260200101516020015183838151811061204457612044614515565b6020026020010151602001818152505083828151811061206657612066614515565b60200260200101516040015183838151811061208457612084614515565b602002602001015160400181815250508382815181106120a6576120a6614515565b6020026020010151606001518383815181106120c4576120c4614515565b602002602001015160600181815250508382815181106120e6576120e6614515565b60200260200101516080015183838151811061210457612104614515565b602090810291909101015190151560809091015281612122816144ba565b9250505b80612130816144ba565b915050611f9c565b509095945050505050565b60006112fd61215160025490565b83612819565b6005546001600160a01b031633146121815760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b0381166121f85760405162461bcd60e51b815260206004820152603860248201527f75706461746546656552656365697665723a206e6577416464726573732063616044820152776e6e6f7420626520746865207a65726f206164647265737360401b6064820152608401610ab5565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146122445760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b0381166122c2576040805162461bcd60e51b81526020600482015260248101919091527f757064617465416363756d756c6174656452656365697665723a206e6577416460448201527f64726573732063616e6e6f7420626520746865207a65726f20616464726573736064820152608401610ab5565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146123115760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b03821660009081526012602052604090205460ff1661239557600d805460018082019092557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0385169081179091556000908152601260205260409020805460ff191690911790555b600083116123ff5760405162461bcd60e51b815260206004820152603160248201527f424e4a2c20696e7465726e616c4d696e743a20416d6f756e74206d7573742062604482015270329036b7b932903a3430b7103d32b9379760791b6064820152608401610ab5565b61240a6014846144d5565b156124715760405162461bcd60e51b815260206004820152603160248201527f424e4a2c20696e7465726e616c4d696e743a20416d6f756e74206d757374206260448201527006520646976697369626c6520627920323607c1b6064820152608401610ab5565b600061247c846112e9565b6021546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156124c557600080fd5b505afa1580156124d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fd91906140fe565b602154600954604051636eb1769f60e11b81523360048201526001600160a01b03918216602482015292935060009291169063dd62ed3e9060440160206040518083038186803b15801561255057600080fd5b505afa158015612564573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258891906140fe565b9050818311156125e55760405162461bcd60e51b815260206004820152602260248201527f424e4a2c20696e7465726e616c4d696e743a204e6f7420656e6f756768205553604482015261444360f01b6064820152608401610ab5565b8083111561265b5760405162461bcd60e51b815260206004820152603b60248201527f424e4a2c20696e7465726e616c4d696e743a204e6f7420656e6f75676820616c60448201527f6c6f77616e636520696e205553444320666f72207061796d656e7400000000006064820152608401610ab5565b624c4b408310156126ca5760405162461bcd60e51b815260206004820152603360248201527f424e4a2c20696e7465726e616c4d696e743a204d696e696d756d206d696e74696044820152726e672076616c7565206f66202435205553444360681b6064820152608401610ab5565b6021546009546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018690529116906323b872dd90606401602060405180830381600087803b15801561272057600080fd5b505af1158015612734573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275891906140c3565b5061276283611976565b600954612778906001600160a01b031687613a06565b7f540b5e46f5323b77eef3b40f9b1bdf436e1b79c3984d271ad7a9b1019c295a8f3387856040516127ab9392919061415c565b60405180910390a16001600160a01b0385166000908152600f6020526040812080548892906127db908490614423565b90915550929695505050505050565b6005546001600160a01b031633146128145760405162461bcd60e51b8152600401610ab590614314565b601a55565b6000808311801561282a5750600082115b80156128365750818310155b6128985760405162461bcd60e51b815260206004820152602d60248201527f424e4a4943757276653a2053656e64696e672061726773206d7573742062652060448201526c06c6172676572207468616e203609c1b6064820152608401610ab5565b60006128a4838561446e565b905060006128b2858061444f565b905060006128c0838061444f565b905060006128ce828461446e565b90506000600654826128e0919061444f565b905060006128f1620c35008361443b565b9050612710600061290282846144d5565b90506000612910828561446e565b9c9b505050505050505050505050565b60008082116129815760405162461bcd60e51b815260206004820152602760248201527f424e4a4943757276653a204d757374206d696e74206d6f7265207468616e203060448201526620746f6b656e7360c81b6064820152608401610ab5565b600061298d848061444f565b9050600061299b8486614423565b905060006129a9828061444f565b905060006129b7848361446e565b90506000600654826129c9919061444f565b90506000600754826128f1919061443b565b6005546001600160a01b03163314612a055760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038116612a6a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ab5565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b03163314612af35760405162461bcd60e51b8152600401610ab590614314565b612b07612aff60025490565b600254612819565b905090565b6001600160a01b038316612b6e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ab5565b6001600160a01b038216612bcf5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ab5565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316612c955760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ab5565b6001600160a01b038216612cf75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ab5565b6001600160a01b03831660009081526020819052604090205481811015612d6f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ab5565b612d79828261446e565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290612daf908490614423565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612dfb91815260200190565b60405180910390a350505050565b600554600160a01b900460ff16612e595760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610ab5565b6005805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600554600090600160a01b900460ff1615612ed35760405162461bcd60e51b8152600401610ab5906142ea565b60026008541415612ef65760405162461bcd60e51b8152600401610ab5906143a6565b6002600855612f066014836144d5565b15612f235760405162461bcd60e51b8152600401610ab590614349565b6000612f2e836112e9565b90506000612f3b33613ae5565b90506000606480612f4c848661444f565b612f56919061443b565b612f60919061443b565b90506000612f70612710836144d5565b90506000612f7e828461446e565b90506000612f8c8287614423565b6021546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015612fd557600080fd5b505afa158015612fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300d91906140fe565b602154600954604051636eb1769f60e11b81523360048201526001600160a01b03918216602482015292935060009291169063dd62ed3e9060440160206040518083038186803b15801561306057600080fd5b505afa158015613074573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309891906140fe565b9050818311156130fc5760405162461bcd60e51b815260206004820152602960248201527f424e4a2c20737065636966696564416d6f756e744d696e743a204e6f7420656e6044820152686f756768205553444360b81b6064820152608401610ab5565b8083111561317d5760405162461bcd60e51b815260206004820152604260248201527f424e4a2c20737065636966696564416d6f756e744d696e743a204e6f7420656e60448201527f6f75676820616c6c6f77616e636520696e205553444320666f72207061796d656064820152611b9d60f21b608482015260a401610ab5565b624c4b408810156131f65760405162461bcd60e51b815260206004820152603a60248201527f424e4a2c20737065636966696564416d6f756e744d696e743a204d696e696d7560448201527f6d206d696e74696e672076616c7565206f6620243520555344430000000000006064820152608401610ab5565b602154600a546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018790529116906323b872dd90606401602060405180830381600087803b15801561324c57600080fd5b505af1158015613260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328491906140c3565b506021546009546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018b90529116906323b872dd90606401602060405180830381600087803b1580156132db57600080fd5b505af11580156132ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331391906140c3565b5061331d88611976565b600954613333906001600160a01b03168b613a06565b7f540b5e46f5323b77eef3b40f9b1bdf436e1b79c3984d271ad7a9b1019c295a8f338b8a6040516133669392919061415c565b60405180910390a1336000908152600e6020526040812080548c929061338d908490614423565b90915550600090506133a060148c61443b565b905060005b818110156133ca576133b8336014613ba9565b806133c2816144ba565b9150506133a5565b50506001600855509598975050505050505050565b6001600160a01b03821661343f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610ab5565b6001600160a01b038216600090815260208190526040902054818110156134b35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610ab5565b6134bd828261446e565b6001600160a01b038416600090815260208190526040812091909155600280548492906134eb90849061446e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612c24565b600554600160a01b900460ff16156135585760405162461bcd60e51b8152600401610ab5906142ea565b602054602154600954604051631a4ca37b60e21b81526001600160a01b0392831660048201526024810185905290821660448201529116906369328dec90606401602060405180830381600087803b1580156135b357600080fd5b505af11580156135c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135eb91906140fe565b506040518181527fcf262399c7d7a6ef0283fba5e04858a528d91a896dc7bc72fa3e55fbfee77deb90602001611a21565b600554600160a01b900460ff16156136465760405162461bcd60e51b8152600401610ab5906142ea565b6005805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e893390565b600554600090600160a01b900460ff16156136ae5760405162461bcd60e51b8152600401610ab5906142ea565b600260085414156136d15760405162461bcd60e51b8152600401610ab5906143a6565b60026008556136e16014836144d5565b156136fe5760405162461bcd60e51b8152600401610ab590614349565b336000908152601060205260409020548261372b5760405162461bcd60e51b8152600401610ab5906143dd565b8281101561374b5760405162461bcd60e51b8152600401610ab59061428c565b600061375684612143565b9050624c4b408110156137d15760405162461bcd60e51b815260206004820152603a60248201527f424e4a2c20737065636966696564416d6f756e744275726e3a204d696e696d7560448201527f6d206275726e696e672076616c756520697320243520555344430000000000006064820152608401610ab5565b60006137dc33613ae5565b905060006064806137ed848661444f565b6137f7919061443b565b613801919061443b565b90506000613811612710836144d5565b9050600061381f828461446e565b9050600061382d828761446e565b9050600061383c60148b61443b565b905060005b8181101561386657613854336014613d69565b8061385e816144ba565b915050613841565b50336000908152600e6020526040812080548c929061388690849061446e565b90915550506009546138a1906001600160a01b03168b6133df565b7fdbba09fffb965fc22fc44dbcfae24c5fa3c095c5e59ad4934a8d71c2980eeda7338b896040516138d49392919061415c565b60405180910390a16138e58761352e565b602154600a5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b15801561393557600080fd5b505af1158015613949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396d91906140c3565b5060215460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156139ba57600080fd5b505af11580156139ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f291906140c3565b505060016008555093979650505050505050565b6001600160a01b038216613a5c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ab5565b8060026000828254613a6e9190614423565b90915550506001600160a01b03821660009081526020819052604081208054839290613a9b908490614423565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0381166000908152601060205260408120546014811015613b11575050601a54919050565b60148110158015613b225750602881105b15613b31575050601b54919050565b60288110158015613b425750603c81105b15613b51575050601c54919050565b603c8110158015613b625750605081105b15613b71575050601d54919050565b60508110158015613b825750606481105b15613b91575050601e54919050565b60648110613ba3575050601f54919050565b50919050565b6001600160a01b0382166000908152600e602052604090205480821115613c1e5760405162461bcd60e51b815260206004820152602360248201527f424e4a2c207374616b65546f6b656e733a204e6f7420656e6f75676820746f6b604482015262656e7360e81b6064820152608401610ab5565b6001600160a01b03831660009081526011602052604090205460ff16613ca257600c805460018082019092557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b0386169081179091556000908152601160205260409020805460ff191690911790555b6001600160a01b0383811660008181526013602081815260408084208054825160a0810184528781528085018281528185018c81524260608401908152608084018a815298885260018086018755958a52878a2084516005870290910180546001600160a01b03191691909d16178c559151948b0194909455925160028a01559151600389015593516004909701805460ff191697151597909717909655938352601090529181208054929392869290613d5d908490614423565b90915550505050505050565b6001600160a01b03821660009081526010602052604090205480821115613de05760405162461bcd60e51b815260206004820152602560248201527f424e4a2c20756e7374616b65546f6b656e733a204e6f7420656e6f75676820746044820152646f6b656e7360d81b6064820152608401610ab5565b6000613deb84611a2c565b90506000815111613e825760405162461bcd60e51b815260206004820152605560248201527f424e4a2c20756e7374616b65546f6b656e733a204e6f206275726e61626c652060448201527f7374616b696e6720706f736974696f6e7320666f756e642e20436f6e7369646560648201527439103a34b6b29039b4b731b29039ba30b5b4b7339760591b608482015260a401610ab5565b600060018251613e92919061446e565b90506000828281518110613ea857613ea8614515565b602002602001015160200151905060005b6001600160a01b038716600090815260136020526040902054811015613f81576001600160a01b0387166000908152601360205260409020805483919083908110613f0657613f06614515565b9060005260206000209060050201600101541415613f6f576001600160a01b038716600090815260136020526040902080546001919083908110613f4c57613f4c614515565b60009182526020909120600590910201600401805460ff19169115159190911790555b80613f79816144ba565b915050613eb9565b506001600160a01b03861660009081526010602052604081208054879290613faa90849061446e565b9091555050505050505050565b6040518060a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000151581525090565b80356001600160a01b0381168114610ca157600080fd5b60006020828403121561401a57600080fd5b61402382613ff1565b9392505050565b6000806040838503121561403d57600080fd5b61404683613ff1565b915061405460208401613ff1565b90509250929050565b60008060006060848603121561407257600080fd5b61407b84613ff1565b925061408960208501613ff1565b9150604084013590509250925092565b600080604083850312156140ac57600080fd5b6140b583613ff1565b946020939093013593505050565b6000602082840312156140d557600080fd5b8151801515811461402357600080fd5b6000602082840312156140f757600080fd5b5035919050565b60006020828403121561411057600080fd5b5051919050565b6000806040838503121561412a57600080fd5b8235915061405460208401613ff1565b6000806040838503121561414d57600080fd5b50508035926020909101359150565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015611da35783516001600160a01b031683529284019291840191600101614199565b602080825282518282018190526000919060409081850190868401855b8281101561422a57815180516001600160a01b03168552868101518786015285810151868601526060808201519086015260809081015115159085015260a090930192908501906001016141db565b5091979650505050505050565b600060208083528351808285015260005b8181101561426457858101830151858201604001528201614248565b81811115614276576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260409082018190527f557365727320746f6b656e42616c616e6365206d75737420626520657175616c908201527f20746f206f72206d6f7265207468616e20616d6f756e7420746f206275726e2e606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526038908201527f424e4a2c20737065636966696564416d6f756e744d696e743a20416d6f756e7460408201527f206d75737420626520646976697369626c652062792032300000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f416d6f756e7420746f206275726e206d757374206265206d6f7265207468616e604082015265103d32b9379760d11b606082015260800190565b60008219821115614436576144366144e9565b500190565b60008261444a5761444a6144ff565b500490565b6000816000190483118215151615614469576144696144e9565b500290565b600082821015614480576144806144e9565b500390565b600181811c9082168061449957607f821691505b60208210811415613ba357634e487b7160e01b600052602260045260246000fd5b60006000198214156144ce576144ce6144e9565b5060010190565b6000826144e4576144e46144ff565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c2f747a178059e742b130c38fa4aea1196d08c21f28bf10e47bb24b0f44f605764736f6c634300080700334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x6080604052600436106103545760003560e01c8063851955d0116101c6578063bcde5a1a116100f7578063dd62ed3e11610095578063e4bbe7eb1161006f578063e4bbe7eb14610a16578063e8e6f9ad14610a36578063f2fde38b14610a56578063f98b242f14610a7657600080fd5b8063dd62ed3e14610990578063e32cb6d8146109d6578063e47bb97b146109f657600080fd5b8063c346e980116100d1578063c346e98014610910578063c69bebe414610930578063cfad0eb614610950578063d948e1041461097057600080fd5b8063bcde5a1a146108b0578063bdb21b58146108d0578063bfb8ec30146108f057600080fd5b8063a457c2d711610164578063a9059cbb1161013e578063a9059cbb1461083b578063ab5b84311461085b578063ad8e763314610870578063b0de36801461089057600080fd5b8063a457c2d7146107d9578063a6ecdb29146107f9578063a7b9c8ae1461081b57600080fd5b80638da5cb5b116101a05780638da5cb5b146107665780638fb330171461078457806395d89b41146107a4578063a1db9782146107b957600080fd5b8063851955d0146107065780638922bd35146107265780638ac69e971461074657600080fd5b806339509351116102a05780635c975abb1161023e5780636c752974116102185780636c7529741461068657806370a08231146106a6578063715018a6146106dc5780638456cb59146106f157600080fd5b80635c975abb1461061a5780635f03e6441461063957806360bd13291461065957600080fd5b806346c105251161027a57806346c10525146105845780634cd6dc28146105a45780634f12192c146105da57806356d2ec1b146105fa57600080fd5b8063395093511461052f5780633f4ba83a1461054f578063413712941461056457600080fd5b8063160873151161030d578063257a0050116102e7578063257a0050146104ad57806326b9dfa4146104cd5780632853c2f7146104ed578063313ce5671461050d57600080fd5b8063160873151461045857806318160ddd1461047857806323b872dd1461048d57600080fd5b8063030942321461036057806306fdde031461038257806307b76354146103ad578063095ea7b3146103d057806310b4afb314610400578063126d8c2a1461043857600080fd5b3661035b57005b600080fd5b34801561036c57600080fd5b5061038061037b3660046140e5565b610a8b565b005b34801561038e57600080fd5b50610397610ac3565b6040516103a49190614237565b60405180910390f35b3480156103b957600080fd5b506103c2610b55565b6040519081526020016103a4565b3480156103dc57600080fd5b506103f06103eb366004614099565b610c43565b60405190151581526020016103a4565b34801561040c57600080fd5b50600954610420906001600160a01b031681565b6040516001600160a01b0390911681526020016103a4565b34801561044457600080fd5b506103c2610453366004614008565b610c59565b34801561046457600080fd5b50610380610473366004614008565b610ca6565b34801561048457600080fd5b506002546103c2565b34801561049957600080fd5b506103f06104a836600461405d565b610d69565b3480156104b957600080fd5b506103806104c8366004614008565b610e1a565b3480156104d957600080fd5b506103806104e83660046140e5565b610ee2565b3480156104f957600080fd5b506103806105083660046140e5565b610f11565b34801561051957600080fd5b5060155460405160ff90911681526020016103a4565b34801561053b57600080fd5b506103f061054a366004614099565b610f40565b34801561055b57600080fd5b50610380610f77565b34801561057057600080fd5b5061038061057f3660046140e5565b610fab565b34801561059057600080fd5b5061038061059f3660046140e5565b610fec565b3480156105b057600080fd5b506103c26105bf366004614008565b6001600160a01b031660009081526010602052604090205490565b3480156105e657600080fd5b506103806105f53660046140e5565b61101b565b34801561060657600080fd5b506103c26106153660046140e5565b61104a565b34801561062657600080fd5b50600554600160a01b900460ff166103f0565b34801561064557600080fd5b506103c26106543660046140e5565b6112e9565b34801561066557600080fd5b50610679610674366004614008565b611303565b6040516103a491906141be565b34801561069257600080fd5b50602154610420906001600160a01b031681565b3480156106b257600080fd5b506103c26106c1366004614008565b6001600160a01b031660009081526020819052604090205490565b3480156106e857600080fd5b506103806113da565b3480156106fd57600080fd5b5061038061144e565b34801561071257600080fd5b506103806107213660046140e5565b611480565b34801561073257600080fd5b506103806107413660046140e5565b6114bd565b34801561075257600080fd5b506103806107613660046140e5565b611570565b34801561077257600080fd5b506005546001600160a01b0316610420565b34801561079057600080fd5b50602254610420906001600160a01b031681565b3480156107b057600080fd5b5061039761159f565b3480156107c557600080fd5b506103806107d4366004614099565b6115ae565b3480156107e557600080fd5b506103f06107f4366004614099565b611660565b34801561080557600080fd5b5061080e6116fb565b6040516103a4919061417d565b34801561082757600080fd5b506103806108363660046140e5565b611787565b34801561084757600080fd5b506103f0610856366004614099565b6117ec565b34801561086757600080fd5b5061080e6117f9565b34801561087c57600080fd5b5061038061088b366004614008565b611884565b34801561089c57600080fd5b506103806108ab3660046140e5565b61194c565b3480156108bc57600080fd5b506106796108cb366004614008565b611a2c565b3480156108dc57600080fd5b506103806108eb3660046140e5565b611daf565b3480156108fc57600080fd5b5061067961090b366004614008565b611dde565b34801561091c57600080fd5b506103c261092b3660046140e5565b612143565b34801561093c57600080fd5b5061038061094b366004614008565b612157565b34801561095c57600080fd5b5061038061096b366004614008565b61221a565b34801561097c57600080fd5b50602054610420906001600160a01b031681565b34801561099c57600080fd5b506103c26109ab36600461402a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156109e257600080fd5b506103c26109f1366004614117565b6122e4565b348015610a0257600080fd5b50610380610a113660046140e5565b6127ea565b348015610a2257600080fd5b506103c2610a3136600461413a565b612819565b348015610a4257600080fd5b506103c2610a5136600461413a565b612920565b348015610a6257600080fd5b50610380610a71366004614008565b6129db565b348015610a8257600080fd5b506103c2612ac6565b6005546001600160a01b03163314610abe5760405162461bcd60e51b8152600401610ab590614314565b60405180910390fd5b601b55565b606060038054610ad290614485565b80601f0160208091040260200160405190810160405280929190818152602001828054610afe90614485565b8015610b4b5780601f10610b2057610100808354040283529160200191610b4b565b820191906000526020600020905b815481529060010190602001808311610b2e57829003601f168201915b5050505050905090565b6005546000906001600160a01b03163314610b825760405162461bcd60e51b8152600401610ab590614314565b6000610b8c612ac6565b905060006064610b9d83606161444f565b610ba7919061443b565b6022546009546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a082319060240160206040518083038186803b158015610bf457600080fd5b505afa158015610c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2c91906140fe565b90506000610c3a828461446e565b94505050505090565b6000610c50338484612b0c565b50600192915050565b6005546000906001600160a01b03163314610c865760405162461bcd60e51b8152600401610ab590614314565b506001600160a01b0381166000908152600f60205260409020545b919050565b6005546001600160a01b03163314610cd05760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038116610d475760405162461bcd60e51b815260206004820152603860248201527f757064617465506f6c79676f6e555344433a206e6577416464726573732063616044820152776e6e6f7420626520746865207a65726f206164647265737360401b6064820152608401610ab5565b602180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610d76848484612c31565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610dfb5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610ab5565b610e0f8533610e0a868561446e565b612b0c565b506001949350505050565b6005546001600160a01b03163314610e445760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038116610ec05760405162461bcd60e51b815260206004820152603f60248201527f757064617465506f6c79676f6e4c656e64696e67506f6f6c3a206e657741646460448201527f726573732063616e6e6f7420626520746865207a65726f2061646472657373006064820152608401610ab5565b602080546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610f0c5760405162461bcd60e51b8152600401610ab590614314565b601c55565b6005546001600160a01b03163314610f3b5760405162461bcd60e51b8152600401610ab590614314565b600755565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c50918590610e0a908690614423565b6005546001600160a01b03163314610fa15760405162461bcd60e51b8152600401610ab590614314565b610fa9612e09565b565b600554600160a01b900460ff1615610fd55760405162461bcd60e51b8152600401610ab5906142ea565b610fe8610fe382601461444f565b612ea6565b5050565b6005546001600160a01b031633146110165760405162461bcd60e51b8152600401610ab590614314565b601e55565b6005546001600160a01b031633146110455760405162461bcd60e51b8152600401610ab590614314565b601f55565b600554600090600160a01b900460ff16156110775760405162461bcd60e51b8152600401610ab5906142ea565b6002600854141561109a5760405162461bcd60e51b8152600401610ab5906143a6565b60026008556110aa6014836144d5565b156111115760405162461bcd60e51b815260206004820152603160248201527f424e4a2c20696e7465726e616c4275726e3a20416d6f756e74206d757374206260448201527006520646976697369626c6520627920323607c1b6064820152608401610ab5565b336000908152600f60205260409020548261113e5760405162461bcd60e51b8152600401610ab5906143dd565b8281101561115e5760405162461bcd60e51b8152600401610ab59061428c565b600061116984612143565b9050624c4b408110156111da5760405162461bcd60e51b815260206004820152603360248201527f424e4a2c20696e7465726e616c4275726e3a204d696e696d756d206275726e696044820152726e672076616c7565206973202435205553444360681b6064820152608401610ab5565b336000908152600f6020526040812080548692906111f990849061446e565b9091555050600954611214906001600160a01b0316856133df565b7fdbba09fffb965fc22fc44dbcfae24c5fa3c095c5e59ad4934a8d71c2980eeda73385836040516112479392919061415c565b60405180910390a16112588161352e565b60215460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156112a457600080fd5b505af11580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc91906140c3565b5060016008559392505050565b60006112fd6112f760025490565b83612920565b92915050565b6005546060906001600160a01b031633146113305760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038216600090815260136020908152604080832080548251818502810185019093528083529193909284015b828210156113cf5760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff16151560808301529083529092019101611363565b505050509050919050565b6005546001600160a01b031633146114045760405162461bcd60e51b8152600401610ab590614314565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b031633146114785760405162461bcd60e51b8152600401610ab590614314565b610fa961361c565b600554600160a01b900460ff16156114aa5760405162461bcd60e51b8152600401610ab5906142ea565b610fe86114b882601461444f565b613681565b6005546001600160a01b031633146114e75760405162461bcd60e51b8152600401610ab590614314565b60215460205460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044015b602060405180830381600087803b15801561153857600080fd5b505af115801561154c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe891906140c3565b6005546001600160a01b0316331461159a5760405162461bcd60e51b8152600401610ab590614314565b601d55565b606060048054610ad290614485565b6005546001600160a01b031633146115d85760405162461bcd60e51b8152600401610ab590614314565b60405163a9059cbb60e01b81523360048201526024810182905282906001600160a01b0382169063a9059cbb90604401602060405180830381600087803b15801561162257600080fd5b505af1158015611636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165a91906140c3565b50505050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156116e25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610ab5565b6116f13385610e0a868561446e565b5060019392505050565b6005546060906001600160a01b031633146117285760405162461bcd60e51b8152600401610ab590614314565b600c805480602002602001604051908101604052809291908181526020018280548015610b4b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611760575050505050905090565b6005546001600160a01b031633146117b15760405162461bcd60e51b8152600401610ab590614314565b602254600b5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb9060440161151e565b6000610c50338484612c31565b6005546060906001600160a01b031633146118265760405162461bcd60e51b8152600401610ab590614314565b600d805480602002602001604051908101604052809291908181526020018280548015610b4b576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611760575050505050905090565b6005546001600160a01b031633146118ae5760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b03811661192a5760405162461bcd60e51b815260206004820152603b60248201527f757064617465506f6c79676f6e414d55534443433a206e65774164647265737360448201527f2063616e6e6f7420626520746865207a65726f206164647265737300000000006064820152608401610ab5565b602280546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146119765760405162461bcd60e51b8152600401610ab590614314565b60205460215460095460405163e8eda9df60e01b81526001600160a01b0392831660048201526024810185905290821660448201526000606482015291169063e8eda9df90608401600060405180830381600087803b1580156119d857600080fd5b505af11580156119ec573d6000803e3d6000fd5b505050507fe4b07db4e98b8c4d7db7898ec0ca1004b8d388810ececa888262a4e5886027a981604051611a2191815260200190565b60405180910390a150565b6001600160a01b0381166000908152601360209081526040808320805482518185028101850190935280835260609442949093849390929091849084015b82821015611ad65760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff16151560808301529083529092019101611a6a565b50505050905060005b8151811015611b6b576000601954838381518110611aff57611aff614515565b602002602001015160600151611b159190614423565b9050828281518110611b2957611b29614515565b602090810291909101015160800151158015611b455750848111155b15611b585783611b54816144ba565b9450505b5080611b63816144ba565b915050611adf565b5081611bac576040805160008082526020820190925290611ba2565b611b8f613fb7565b815260200190600190039081611b875790505b5095945050505050565b60008267ffffffffffffffff811115611bc757611bc761452b565b604051908082528060200260200182016040528015611c0057816020015b611bed613fb7565b815260200190600190039081611be55790505b5090506000805b8251811015611da357838181518110611c2257611c22614515565b602090810291909101015160800151611d9157838281518110611c4757611c47614515565b602002602001015160000151838381518110611c6557611c65614515565b60209081029190910101516001600160a01b0390911690528351849083908110611c9157611c91614515565b602002602001015160200151838381518110611caf57611caf614515565b60200260200101516020018181525050838281518110611cd157611cd1614515565b602002602001015160400151838381518110611cef57611cef614515565b60200260200101516040018181525050838281518110611d1157611d11614515565b602002602001015160600151838381518110611d2f57611d2f614515565b60200260200101516060018181525050838281518110611d5157611d51614515565b602002602001015160800151838381518110611d6f57611d6f614515565b602090810291909101015190151560809091015281611d8d816144ba565b9250505b80611d9b816144ba565b915050611c07565b50909695505050505050565b6005546001600160a01b03163314611dd95760405162461bcd60e51b8152600401610ab590614314565b601955565b6005546060906001600160a01b03163314611e0b5760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038216600090815260146020908152604080832080548251818502810185019093528083528493849084015b82821015611eaa5760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460608401526004015460ff16151560808301529083529092019101611e3e565b50505050905060005b8151811015611f0157818181518110611ece57611ece614515565b602090810291909101015160800151611eef5782611eeb816144ba565b9350505b80611ef9816144ba565b915050611eb3565b5081611f41576040805160008082526020820190925290611f38565b611f25613fb7565b815260200190600190039081611f1d5790505b50949350505050565b60008267ffffffffffffffff811115611f5c57611f5c61452b565b604051908082528060200260200182016040528015611f9557816020015b611f82613fb7565b815260200190600190039081611f7a5790505b5090506000805b825181101561213857838181518110611fb757611fb7614515565b60209081029190910101516080015161212657838281518110611fdc57611fdc614515565b602002602001015160000151838381518110611ffa57611ffa614515565b60209081029190910101516001600160a01b039091169052835184908390811061202657612026614515565b60200260200101516020015183838151811061204457612044614515565b6020026020010151602001818152505083828151811061206657612066614515565b60200260200101516040015183838151811061208457612084614515565b602002602001015160400181815250508382815181106120a6576120a6614515565b6020026020010151606001518383815181106120c4576120c4614515565b602002602001015160600181815250508382815181106120e6576120e6614515565b60200260200101516080015183838151811061210457612104614515565b602090810291909101015190151560809091015281612122816144ba565b9250505b80612130816144ba565b915050611f9c565b509095945050505050565b60006112fd61215160025490565b83612819565b6005546001600160a01b031633146121815760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b0381166121f85760405162461bcd60e51b815260206004820152603860248201527f75706461746546656552656365697665723a206e6577416464726573732063616044820152776e6e6f7420626520746865207a65726f206164647265737360401b6064820152608401610ab5565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146122445760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b0381166122c2576040805162461bcd60e51b81526020600482015260248101919091527f757064617465416363756d756c6174656452656365697665723a206e6577416460448201527f64726573732063616e6e6f7420626520746865207a65726f20616464726573736064820152608401610ab5565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146123115760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b03821660009081526012602052604090205460ff1661239557600d805460018082019092557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0385169081179091556000908152601260205260409020805460ff191690911790555b600083116123ff5760405162461bcd60e51b815260206004820152603160248201527f424e4a2c20696e7465726e616c4d696e743a20416d6f756e74206d7573742062604482015270329036b7b932903a3430b7103d32b9379760791b6064820152608401610ab5565b61240a6014846144d5565b156124715760405162461bcd60e51b815260206004820152603160248201527f424e4a2c20696e7465726e616c4d696e743a20416d6f756e74206d757374206260448201527006520646976697369626c6520627920323607c1b6064820152608401610ab5565b600061247c846112e9565b6021546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156124c557600080fd5b505afa1580156124d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fd91906140fe565b602154600954604051636eb1769f60e11b81523360048201526001600160a01b03918216602482015292935060009291169063dd62ed3e9060440160206040518083038186803b15801561255057600080fd5b505afa158015612564573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258891906140fe565b9050818311156125e55760405162461bcd60e51b815260206004820152602260248201527f424e4a2c20696e7465726e616c4d696e743a204e6f7420656e6f756768205553604482015261444360f01b6064820152608401610ab5565b8083111561265b5760405162461bcd60e51b815260206004820152603b60248201527f424e4a2c20696e7465726e616c4d696e743a204e6f7420656e6f75676820616c60448201527f6c6f77616e636520696e205553444320666f72207061796d656e7400000000006064820152608401610ab5565b624c4b408310156126ca5760405162461bcd60e51b815260206004820152603360248201527f424e4a2c20696e7465726e616c4d696e743a204d696e696d756d206d696e74696044820152726e672076616c7565206f66202435205553444360681b6064820152608401610ab5565b6021546009546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018690529116906323b872dd90606401602060405180830381600087803b15801561272057600080fd5b505af1158015612734573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275891906140c3565b5061276283611976565b600954612778906001600160a01b031687613a06565b7f540b5e46f5323b77eef3b40f9b1bdf436e1b79c3984d271ad7a9b1019c295a8f3387856040516127ab9392919061415c565b60405180910390a16001600160a01b0385166000908152600f6020526040812080548892906127db908490614423565b90915550929695505050505050565b6005546001600160a01b031633146128145760405162461bcd60e51b8152600401610ab590614314565b601a55565b6000808311801561282a5750600082115b80156128365750818310155b6128985760405162461bcd60e51b815260206004820152602d60248201527f424e4a4943757276653a2053656e64696e672061726773206d7573742062652060448201526c06c6172676572207468616e203609c1b6064820152608401610ab5565b60006128a4838561446e565b905060006128b2858061444f565b905060006128c0838061444f565b905060006128ce828461446e565b90506000600654826128e0919061444f565b905060006128f1620c35008361443b565b9050612710600061290282846144d5565b90506000612910828561446e565b9c9b505050505050505050505050565b60008082116129815760405162461bcd60e51b815260206004820152602760248201527f424e4a4943757276653a204d757374206d696e74206d6f7265207468616e203060448201526620746f6b656e7360c81b6064820152608401610ab5565b600061298d848061444f565b9050600061299b8486614423565b905060006129a9828061444f565b905060006129b7848361446e565b90506000600654826129c9919061444f565b90506000600754826128f1919061443b565b6005546001600160a01b03163314612a055760405162461bcd60e51b8152600401610ab590614314565b6001600160a01b038116612a6a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ab5565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b03163314612af35760405162461bcd60e51b8152600401610ab590614314565b612b07612aff60025490565b600254612819565b905090565b6001600160a01b038316612b6e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ab5565b6001600160a01b038216612bcf5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ab5565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316612c955760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ab5565b6001600160a01b038216612cf75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ab5565b6001600160a01b03831660009081526020819052604090205481811015612d6f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ab5565b612d79828261446e565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290612daf908490614423565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612dfb91815260200190565b60405180910390a350505050565b600554600160a01b900460ff16612e595760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610ab5565b6005805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600554600090600160a01b900460ff1615612ed35760405162461bcd60e51b8152600401610ab5906142ea565b60026008541415612ef65760405162461bcd60e51b8152600401610ab5906143a6565b6002600855612f066014836144d5565b15612f235760405162461bcd60e51b8152600401610ab590614349565b6000612f2e836112e9565b90506000612f3b33613ae5565b90506000606480612f4c848661444f565b612f56919061443b565b612f60919061443b565b90506000612f70612710836144d5565b90506000612f7e828461446e565b90506000612f8c8287614423565b6021546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015612fd557600080fd5b505afa158015612fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300d91906140fe565b602154600954604051636eb1769f60e11b81523360048201526001600160a01b03918216602482015292935060009291169063dd62ed3e9060440160206040518083038186803b15801561306057600080fd5b505afa158015613074573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309891906140fe565b9050818311156130fc5760405162461bcd60e51b815260206004820152602960248201527f424e4a2c20737065636966696564416d6f756e744d696e743a204e6f7420656e6044820152686f756768205553444360b81b6064820152608401610ab5565b8083111561317d5760405162461bcd60e51b815260206004820152604260248201527f424e4a2c20737065636966696564416d6f756e744d696e743a204e6f7420656e60448201527f6f75676820616c6c6f77616e636520696e205553444320666f72207061796d656064820152611b9d60f21b608482015260a401610ab5565b624c4b408810156131f65760405162461bcd60e51b815260206004820152603a60248201527f424e4a2c20737065636966696564416d6f756e744d696e743a204d696e696d7560448201527f6d206d696e74696e672076616c7565206f6620243520555344430000000000006064820152608401610ab5565b602154600a546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018790529116906323b872dd90606401602060405180830381600087803b15801561324c57600080fd5b505af1158015613260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328491906140c3565b506021546009546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018b90529116906323b872dd90606401602060405180830381600087803b1580156132db57600080fd5b505af11580156132ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331391906140c3565b5061331d88611976565b600954613333906001600160a01b03168b613a06565b7f540b5e46f5323b77eef3b40f9b1bdf436e1b79c3984d271ad7a9b1019c295a8f338b8a6040516133669392919061415c565b60405180910390a1336000908152600e6020526040812080548c929061338d908490614423565b90915550600090506133a060148c61443b565b905060005b818110156133ca576133b8336014613ba9565b806133c2816144ba565b9150506133a5565b50506001600855509598975050505050505050565b6001600160a01b03821661343f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610ab5565b6001600160a01b038216600090815260208190526040902054818110156134b35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610ab5565b6134bd828261446e565b6001600160a01b038416600090815260208190526040812091909155600280548492906134eb90849061446e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612c24565b600554600160a01b900460ff16156135585760405162461bcd60e51b8152600401610ab5906142ea565b602054602154600954604051631a4ca37b60e21b81526001600160a01b0392831660048201526024810185905290821660448201529116906369328dec90606401602060405180830381600087803b1580156135b357600080fd5b505af11580156135c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135eb91906140fe565b506040518181527fcf262399c7d7a6ef0283fba5e04858a528d91a896dc7bc72fa3e55fbfee77deb90602001611a21565b600554600160a01b900460ff16156136465760405162461bcd60e51b8152600401610ab5906142ea565b6005805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e893390565b600554600090600160a01b900460ff16156136ae5760405162461bcd60e51b8152600401610ab5906142ea565b600260085414156136d15760405162461bcd60e51b8152600401610ab5906143a6565b60026008556136e16014836144d5565b156136fe5760405162461bcd60e51b8152600401610ab590614349565b336000908152601060205260409020548261372b5760405162461bcd60e51b8152600401610ab5906143dd565b8281101561374b5760405162461bcd60e51b8152600401610ab59061428c565b600061375684612143565b9050624c4b408110156137d15760405162461bcd60e51b815260206004820152603a60248201527f424e4a2c20737065636966696564416d6f756e744275726e3a204d696e696d7560448201527f6d206275726e696e672076616c756520697320243520555344430000000000006064820152608401610ab5565b60006137dc33613ae5565b905060006064806137ed848661444f565b6137f7919061443b565b613801919061443b565b90506000613811612710836144d5565b9050600061381f828461446e565b9050600061382d828761446e565b9050600061383c60148b61443b565b905060005b8181101561386657613854336014613d69565b8061385e816144ba565b915050613841565b50336000908152600e6020526040812080548c929061388690849061446e565b90915550506009546138a1906001600160a01b03168b6133df565b7fdbba09fffb965fc22fc44dbcfae24c5fa3c095c5e59ad4934a8d71c2980eeda7338b896040516138d49392919061415c565b60405180910390a16138e58761352e565b602154600a5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b15801561393557600080fd5b505af1158015613949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396d91906140c3565b5060215460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156139ba57600080fd5b505af11580156139ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f291906140c3565b505060016008555093979650505050505050565b6001600160a01b038216613a5c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ab5565b8060026000828254613a6e9190614423565b90915550506001600160a01b03821660009081526020819052604081208054839290613a9b908490614423565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0381166000908152601060205260408120546014811015613b11575050601a54919050565b60148110158015613b225750602881105b15613b31575050601b54919050565b60288110158015613b425750603c81105b15613b51575050601c54919050565b603c8110158015613b625750605081105b15613b71575050601d54919050565b60508110158015613b825750606481105b15613b91575050601e54919050565b60648110613ba3575050601f54919050565b50919050565b6001600160a01b0382166000908152600e602052604090205480821115613c1e5760405162461bcd60e51b815260206004820152602360248201527f424e4a2c207374616b65546f6b656e733a204e6f7420656e6f75676820746f6b604482015262656e7360e81b6064820152608401610ab5565b6001600160a01b03831660009081526011602052604090205460ff16613ca257600c805460018082019092557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b0386169081179091556000908152601160205260409020805460ff191690911790555b6001600160a01b0383811660008181526013602081815260408084208054825160a0810184528781528085018281528185018c81524260608401908152608084018a815298885260018086018755958a52878a2084516005870290910180546001600160a01b03191691909d16178c559151948b0194909455925160028a01559151600389015593516004909701805460ff191697151597909717909655938352601090529181208054929392869290613d5d908490614423565b90915550505050505050565b6001600160a01b03821660009081526010602052604090205480821115613de05760405162461bcd60e51b815260206004820152602560248201527f424e4a2c20756e7374616b65546f6b656e733a204e6f7420656e6f75676820746044820152646f6b656e7360d81b6064820152608401610ab5565b6000613deb84611a2c565b90506000815111613e825760405162461bcd60e51b815260206004820152605560248201527f424e4a2c20756e7374616b65546f6b656e733a204e6f206275726e61626c652060448201527f7374616b696e6720706f736974696f6e7320666f756e642e20436f6e7369646560648201527439103a34b6b29039b4b731b29039ba30b5b4b7339760591b608482015260a401610ab5565b600060018251613e92919061446e565b90506000828281518110613ea857613ea8614515565b602002602001015160200151905060005b6001600160a01b038716600090815260136020526040902054811015613f81576001600160a01b0387166000908152601360205260409020805483919083908110613f0657613f06614515565b9060005260206000209060050201600101541415613f6f576001600160a01b038716600090815260136020526040902080546001919083908110613f4c57613f4c614515565b60009182526020909120600590910201600401805460ff19169115159190911790555b80613f79816144ba565b915050613eb9565b506001600160a01b03861660009081526010602052604081208054879290613faa90849061446e565b9091555050505050505050565b6040518060a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000151581525090565b80356001600160a01b0381168114610ca157600080fd5b60006020828403121561401a57600080fd5b61402382613ff1565b9392505050565b6000806040838503121561403d57600080fd5b61404683613ff1565b915061405460208401613ff1565b90509250929050565b60008060006060848603121561407257600080fd5b61407b84613ff1565b925061408960208501613ff1565b9150604084013590509250925092565b600080604083850312156140ac57600080fd5b6140b583613ff1565b946020939093013593505050565b6000602082840312156140d557600080fd5b8151801515811461402357600080fd5b6000602082840312156140f757600080fd5b5035919050565b60006020828403121561411057600080fd5b5051919050565b6000806040838503121561412a57600080fd5b8235915061405460208401613ff1565b6000806040838503121561414d57600080fd5b50508035926020909101359150565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015611da35783516001600160a01b031683529284019291840191600101614199565b602080825282518282018190526000919060409081850190868401855b8281101561422a57815180516001600160a01b03168552868101518786015285810151868601526060808201519086015260809081015115159085015260a090930192908501906001016141db565b5091979650505050505050565b600060208083528351808285015260005b8181101561426457858101830151858201604001528201614248565b81811115614276576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260409082018190527f557365727320746f6b656e42616c616e6365206d75737420626520657175616c908201527f20746f206f72206d6f7265207468616e20616d6f756e7420746f206275726e2e606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526038908201527f424e4a2c20737065636966696564416d6f756e744d696e743a20416d6f756e7460408201527f206d75737420626520646976697369626c652062792032300000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f416d6f756e7420746f206275726e206d757374206265206d6f7265207468616e604082015265103d32b9379760d11b606082015260800190565b60008219821115614436576144366144e9565b500190565b60008261444a5761444a6144ff565b500490565b6000816000190483118215151615614469576144696144e9565b500290565b600082821015614480576144806144e9565b500390565b600181811c9082168061449957607f821691505b60208210811415613ba357634e487b7160e01b600052602260045260246000fd5b60006000198214156144ce576144ce6144e9565b5060010190565b6000826144e4576144e46144ff565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c2f747a178059e742b130c38fa4aea1196d08c21f28bf10e47bb24b0f44f605764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 257,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 263,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 265,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 267,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 269,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 127,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "_paused",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 1200,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "USDCscale",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1203,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "curveFactor",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 212,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1992,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "addressOfThisContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1994,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1996,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "accumulatedReceiver",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1999,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "stakers",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2002,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "internalAddresses",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2006,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "ownedBenjamins",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2010,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "internalBenjamins",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2014,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "totalStakedByUser",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2018,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "isOnStakingList",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2022,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "isOnInternalList",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2028,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "usersStakingPositions",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_struct(Stake)2045_storage)dyn_storage)"
      },
      {
        "astId": 2034,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "internalStakingPositions",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_array(t_struct(Stake)2045_storage)dyn_storage)"
      },
      {
        "astId": 2047,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "amountDecimals",
        "offset": 0,
        "slot": "21",
        "type": "t_uint8"
      },
      {
        "astId": 2054,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "largestUint",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2057,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "centsScale4digits",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2060,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "dollarScale6dec",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 2063,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "stakingPeriodInSeconds",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 2066,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "tier_0_feeMod",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 2069,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "tier_1_feeMod",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 2072,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "tier_2_feeMod",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 2075,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "tier_3_feeMod",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 2078,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "tier_4_feeMod",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 2081,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "tier_5_feeMod",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 2084,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "polygonLendingPool",
        "offset": 0,
        "slot": "32",
        "type": "t_contract(ILendingPool)1824"
      },
      {
        "astId": 2087,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "polygonUSDC",
        "offset": 0,
        "slot": "33",
        "type": "t_contract(IERC20)826"
      },
      {
        "astId": 2090,
        "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
        "label": "polygonAMUSDC",
        "offset": 0,
        "slot": "34",
        "type": "t_contract(IERC20)826"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stake)2045_storage)dyn_storage": {
        "base": "t_struct(Stake)2045_storage",
        "encoding": "dynamic_array",
        "label": "struct MumbaiBenjamins.Stake[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)826": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)1824": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Stake)2045_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MumbaiBenjamins.Stake[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Stake)2045_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Stake)2045_storage": {
        "encoding": "inplace",
        "label": "struct MumbaiBenjamins.Stake",
        "members": [
          {
            "astId": 2036,
            "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
            "label": "stakingAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2038,
            "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
            "label": "stakeID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2040,
            "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
            "label": "tokenAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2042,
            "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
            "label": "stakeCreatedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2044,
            "contract": "contracts/MumbaiBenjamins.sol:MumbaiBenjamins",
            "label": "unstaked",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}